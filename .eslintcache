[{"D:\\PROJECTS\\tech\\src\\index.js":"1","D:\\PROJECTS\\tech\\src\\reportWebVitals.js":"2","D:\\PROJECTS\\tech\\src\\redux\\redux-store.js":"3","D:\\PROJECTS\\tech\\src\\components\\App\\index.js":"4","D:\\PROJECTS\\tech\\src\\redux\\Profile-reducer.js":"5","D:\\PROJECTS\\tech\\src\\redux\\Dialogs-reducer.js":"6","D:\\PROJECTS\\tech\\src\\redux\\Auth-reducer.js":"7","D:\\PROJECTS\\tech\\src\\redux\\App-reducer.js":"8","D:\\PROJECTS\\tech\\src\\redux\\Printers-reducer.js":"9","D:\\PROJECTS\\tech\\src\\redux\\Tech-reducer.js":"10","D:\\PROJECTS\\tech\\src\\api\\api.js":"11","D:\\PROJECTS\\tech\\src\\components\\App\\App.jsx":"12","D:\\PROJECTS\\tech\\src\\components\\App\\Authorization\\index.js":"13","D:\\PROJECTS\\tech\\src\\components\\Header\\index.js":"14","D:\\PROJECTS\\tech\\src\\components\\App\\AppWithRouter\\index.js":"15","D:\\PROJECTS\\tech\\src\\components\\Header\\Header.jsx":"16","D:\\PROJECTS\\tech\\src\\components\\App\\Authorization\\Authorization.jsx":"17","D:\\PROJECTS\\tech\\src\\components\\App\\AppWithRouter\\AppWithRouter.jsx":"18","D:\\PROJECTS\\tech\\src\\components\\Header\\Header.css.js":"19","D:\\PROJECTS\\tech\\src\\pages\\SignInPage\\index.js":"20","D:\\PROJECTS\\tech\\src\\pages\\Profile\\index.js":"21","D:\\PROJECTS\\tech\\src\\pages\\TypePage\\index.js":"22","D:\\PROJECTS\\tech\\src\\pages\\PrintersPage\\index.js":"23","D:\\PROJECTS\\tech\\src\\pages\\TechnicPage\\index.js":"24","D:\\PROJECTS\\tech\\src\\pages\\RoomPage\\index.js":"25","D:\\PROJECTS\\tech\\src\\pages\\EventsPage\\index.js":"26","D:\\PROJECTS\\tech\\src\\pages\\LastRefuelingPage\\index.js":"27","D:\\PROJECTS\\tech\\src\\pages\\RoomPage\\RoomPage.jsx":"28","D:\\PROJECTS\\tech\\src\\pages\\EventsPage\\EventsPage.jsx":"29","D:\\PROJECTS\\tech\\src\\pages\\LastRefuelingPage\\LastRefuelingPage.jsx":"30","D:\\PROJECTS\\tech\\src\\pages\\PrintersPage\\PrintersPage.jsx":"31","D:\\PROJECTS\\tech\\src\\pages\\TechnicPage\\TechnicPage.jsx":"32","D:\\PROJECTS\\tech\\src\\pages\\TypePage\\TypePage.jsx":"33","D:\\PROJECTS\\tech\\src\\pages\\Profile\\ProfilePage.jsx":"34","D:\\PROJECTS\\tech\\src\\pages\\SignInPage\\SignInPage.jsx":"35","D:\\PROJECTS\\tech\\src\\pages\\TypePage\\TypePageStyle.js":"36","D:\\PROJECTS\\tech\\src\\components\\global\\images.js":"37","D:\\PROJECTS\\tech\\src\\components\\global\\groupElementsByDate.js":"38","D:\\PROJECTS\\tech\\src\\components\\Common\\TextError.jsx":"39","D:\\PROJECTS\\tech\\src\\components\\ListTechnics\\index.js":"40","D:\\PROJECTS\\tech\\src\\components\\global\\formatDate.js":"41","D:\\PROJECTS\\tech\\src\\components\\ListTechnics\\ListTechnics.jsx":"42","D:\\PROJECTS\\tech\\src\\components\\MiniCardTechnic\\index.js":"43","D:\\PROJECTS\\tech\\src\\components\\Title\\index.js":"44","D:\\PROJECTS\\tech\\src\\components\\Title\\Title.jsx":"45","D:\\PROJECTS\\tech\\src\\components\\MiniCardTechnic\\MiniCardTechnic.jsx":"46","D:\\PROJECTS\\tech\\src\\components\\WarningData\\WarningData.jsx":"47","D:\\PROJECTS\\tech\\src\\components\\global\\countDays.js":"48","D:\\PROJECTS\\tech\\src\\components\\Portfolio\\index.js":"49","D:\\PROJECTS\\tech\\src\\components\\Profile\\index.js":"50","D:\\PROJECTS\\tech\\src\\components\\Modal\\index.js":"51","D:\\PROJECTS\\tech\\src\\components\\FiltersTechnic\\index.js":"52","D:\\PROJECTS\\tech\\src\\components\\ActiveCategories\\index.js":"53","D:\\PROJECTS\\tech\\src\\components\\ListTypes\\index.js":"54","D:\\PROJECTS\\tech\\src\\components\\Icon\\index.js":"55","D:\\PROJECTS\\tech\\src\\components\\ListItemForm\\index.js":"56","D:\\PROJECTS\\tech\\src\\components\\Accordion\\index.js":"57","D:\\PROJECTS\\tech\\src\\components\\StagesFueling\\index.js":"58","D:\\PROJECTS\\tech\\src\\components\\Portfolio\\Portfolio.jsx":"59","D:\\PROJECTS\\tech\\src\\components\\Profile\\Profile.jsx":"60","D:\\PROJECTS\\tech\\src\\components\\Modal\\Modal.jsx":"61","D:\\PROJECTS\\tech\\src\\components\\FiltersTechnic\\FiltersTechnic.jsx":"62","D:\\PROJECTS\\tech\\src\\components\\ActiveCategories\\ActiveCategories.jsx":"63","D:\\PROJECTS\\tech\\src\\components\\ListTypes\\ListTypes.jsx":"64","D:\\PROJECTS\\tech\\src\\components\\Icon\\Icon.jsx":"65","D:\\PROJECTS\\tech\\src\\components\\ListItemForm\\ListItemForm.jsx":"66","D:\\PROJECTS\\tech\\src\\components\\Accordion\\Accordion.jsx":"67","D:\\PROJECTS\\tech\\src\\components\\StagesFueling\\StagesFueling.jsx":"68","D:\\PROJECTS\\tech\\src\\components\\global\\getProperty.js":"69","D:\\PROJECTS\\tech\\src\\components\\global\\global.js":"70","D:\\PROJECTS\\tech\\src\\components\\AutocompleteTextarea\\index.js":"71","D:\\PROJECTS\\tech\\src\\components\\AutocompleteTextarea\\AutocompleteTextarea.jsx":"72"},{"size":542,"mtime":1633421968805,"results":"73","hashOfConfig":"74"},{"size":375,"mtime":1633421968825,"results":"75","hashOfConfig":"74"},{"size":807,"mtime":1633421968824,"results":"76","hashOfConfig":"74"},{"size":364,"mtime":1633421968648,"results":"77","hashOfConfig":"74"},{"size":4853770,"mtime":1638427249757,"results":"78","hashOfConfig":"74"},{"size":2414,"mtime":1633421968822,"results":"79","hashOfConfig":"74"},{"size":2962,"mtime":1633421968822,"results":"80","hashOfConfig":"74"},{"size":800,"mtime":1633421968821,"results":"81","hashOfConfig":"74"},{"size":2913,"mtime":1633421968822,"results":"82","hashOfConfig":"74"},{"size":12582,"mtime":1633421968823,"results":"83","hashOfConfig":"74"},{"size":5064,"mtime":1633423892390,"results":"84","hashOfConfig":"74"},{"size":404,"mtime":1633421968645,"results":"85","hashOfConfig":"74"},{"size":203,"mtime":1633421968647,"results":"86","hashOfConfig":"74"},{"size":348,"mtime":1633421968756,"results":"87","hashOfConfig":"74"},{"size":198,"mtime":1633421968646,"results":"88","hashOfConfig":"74"},{"size":3088,"mtime":1636360888997,"results":"89","hashOfConfig":"74"},{"size":362,"mtime":1633421968647,"results":"90","hashOfConfig":"74"},{"size":1540,"mtime":1633421968646,"results":"91","hashOfConfig":"74"},{"size":1741,"mtime":1633421968753,"results":"92","hashOfConfig":"74"},{"size":488,"mtime":1633421968815,"results":"93","hashOfConfig":"74"},{"size":233,"mtime":1638428706791,"results":"94","hashOfConfig":"74"},{"size":419,"mtime":1633421968820,"results":"95","hashOfConfig":"74"},{"size":641,"mtime":1633421968809,"results":"96","hashOfConfig":"74"},{"size":720,"mtime":1633421968817,"results":"97","hashOfConfig":"74"},{"size":371,"mtime":1633421968813,"results":"98","hashOfConfig":"74"},{"size":363,"mtime":1633421968807,"results":"99","hashOfConfig":"74"},{"size":387,"mtime":1636361011690,"results":"100","hashOfConfig":"74"},{"size":2758,"mtime":1633421968812,"results":"101","hashOfConfig":"74"},{"size":5420,"mtime":1633421968806,"results":"102","hashOfConfig":"74"},{"size":861,"mtime":1637053286725,"results":"103","hashOfConfig":"74"},{"size":3432,"mtime":1637052761668,"results":"104","hashOfConfig":"74"},{"size":13556,"mtime":1636612478120,"results":"105","hashOfConfig":"74"},{"size":8961,"mtime":1633421968819,"results":"106","hashOfConfig":"74"},{"size":7858,"mtime":1639124515744,"results":"107","hashOfConfig":"74"},{"size":3842,"mtime":1633421968814,"results":"108","hashOfConfig":"74"},{"size":1319,"mtime":1633421968819,"results":"109","hashOfConfig":"74"},{"size":5659,"mtime":1633421968799,"results":"110","hashOfConfig":"74"},{"size":963,"mtime":1633421968799,"results":"111","hashOfConfig":"74"},{"size":205,"mtime":1633421968746,"results":"112","hashOfConfig":"74"},{"size":371,"mtime":1633421968766,"results":"113","hashOfConfig":"74"},{"size":257,"mtime":1633421968796,"results":"114","hashOfConfig":"74"},{"size":5128,"mtime":1633421968765,"results":"115","hashOfConfig":"74"},{"size":390,"mtime":1633421968772,"results":"116","hashOfConfig":"74"},{"size":51,"mtime":1633421968789,"results":"117","hashOfConfig":"74"},{"size":184,"mtime":1633421968789,"results":"118","hashOfConfig":"74"},{"size":1485,"mtime":1633421968771,"results":"119","hashOfConfig":"74"},{"size":1689,"mtime":1633421968794,"results":"120","hashOfConfig":"74"},{"size":214,"mtime":1633421968795,"results":"121","hashOfConfig":"74"},{"size":189,"mtime":1633421968778,"results":"122","hashOfConfig":"74"},{"size":219,"mtime":1633421968781,"results":"123","hashOfConfig":"74"},{"size":53,"mtime":1633421968775,"results":"124","hashOfConfig":"74"},{"size":414,"mtime":1633421968750,"results":"125","hashOfConfig":"74"},{"size":260,"mtime":1633421968644,"results":"126","hashOfConfig":"74"},{"size":385,"mtime":1633421968769,"results":"127","hashOfConfig":"74"},{"size":211,"mtime":1633421968759,"results":"128","hashOfConfig":"74"},{"size":353,"mtime":1638428479107,"results":"129","hashOfConfig":"74"},{"size":86,"mtime":1633421968643,"results":"130","hashOfConfig":"74"},{"size":488,"mtime":1633421968785,"results":"131","hashOfConfig":"74"},{"size":1146,"mtime":1633421968777,"results":"132","hashOfConfig":"74"},{"size":1977,"mtime":1633421968780,"results":"133","hashOfConfig":"74"},{"size":455,"mtime":1633421968774,"results":"134","hashOfConfig":"74"},{"size":4489,"mtime":1633421968749,"results":"135","hashOfConfig":"74"},{"size":583,"mtime":1633421968644,"results":"136","hashOfConfig":"74"},{"size":3380,"mtime":1633421968768,"results":"137","hashOfConfig":"74"},{"size":700,"mtime":1633421968757,"results":"138","hashOfConfig":"74"},{"size":2158,"mtime":1633421968763,"results":"139","hashOfConfig":"74"},{"size":9507,"mtime":1636961615403,"results":"140","hashOfConfig":"74"},{"size":6901,"mtime":1636966377655,"results":"141","hashOfConfig":"74"},{"size":171,"mtime":1633421968797,"results":"142","hashOfConfig":"74"},{"size":1216,"mtime":1633421968797,"results":"143","hashOfConfig":"74"},{"size":478,"mtime":1633421968718,"results":"144","hashOfConfig":"74"},{"size":6032,"mtime":1633421968717,"results":"145","hashOfConfig":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},"1vhryo1",{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"148"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"148"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"148"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"148"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"148"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"148"},{"filePath":"219","messages":"220","errorCount":1,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"230"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"148"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"148"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"148"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"148"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"148"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"148"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"148"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"148"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"148"},"D:\\PROJECTS\\tech\\src\\index.js",[],["308","309"],"D:\\PROJECTS\\tech\\src\\reportWebVitals.js",[],"D:\\PROJECTS\\tech\\src\\redux\\redux-store.js",[],"D:\\PROJECTS\\tech\\src\\components\\App\\index.js",[],"D:\\PROJECTS\\tech\\src\\redux\\Profile-reducer.js",[],"D:\\PROJECTS\\tech\\src\\redux\\Dialogs-reducer.js",[],"D:\\PROJECTS\\tech\\src\\redux\\Auth-reducer.js",[],"D:\\PROJECTS\\tech\\src\\redux\\App-reducer.js",[],"D:\\PROJECTS\\tech\\src\\redux\\Printers-reducer.js",[],"D:\\PROJECTS\\tech\\src\\redux\\Tech-reducer.js",[],"D:\\PROJECTS\\tech\\src\\api\\api.js",[],"D:\\PROJECTS\\tech\\src\\components\\App\\App.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\App\\Authorization\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Header\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\App\\AppWithRouter\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Header\\Header.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\App\\Authorization\\Authorization.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\App\\AppWithRouter\\AppWithRouter.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\Header\\Header.css.js",[],"D:\\PROJECTS\\tech\\src\\pages\\SignInPage\\index.js",[],"D:\\PROJECTS\\tech\\src\\pages\\Profile\\index.js",[],"D:\\PROJECTS\\tech\\src\\pages\\TypePage\\index.js",[],"D:\\PROJECTS\\tech\\src\\pages\\PrintersPage\\index.js",[],"D:\\PROJECTS\\tech\\src\\pages\\TechnicPage\\index.js",[],"D:\\PROJECTS\\tech\\src\\pages\\RoomPage\\index.js",[],"D:\\PROJECTS\\tech\\src\\pages\\EventsPage\\index.js",[],"D:\\PROJECTS\\tech\\src\\pages\\LastRefuelingPage\\index.js",[],"D:\\PROJECTS\\tech\\src\\pages\\RoomPage\\RoomPage.jsx",["310","311","312"],"import {Avatar, Card, Container, Grid, List, ListItem, ListItemIcon, ListItemText} from \"@material-ui/core\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {useEffect, useState} from \"react\";\r\nimport images from \"../../components/global/images\";\r\n\r\nconst layout = [\"Системный блок\", \"Компьютер (комплект)\", \"Монитор\", \"Моноблок\", \"Ноутбук\",\"Телевизор\",  \"Проектор\",\"Принтер\", \"МФУ\",\"Сканер\",\"Ксерокс\",\r\n    \"Акустическая система\",\"Планшет\",\"Веб-камера\", \"Мышь\",  \"Клавиатура\", \"Фотоаппарат\", \"Документ-камера\", \"Перфобиндер\"]\r\n\r\nconst RoomPage = ({getTechnicsByRoom, technicsByRoom}) => {\r\n    let {room} = useParams();\r\n    const [technics, setTechnics] = useState(\"\")\r\n    useEffect(() => {\r\n        async function getTechnics() {\r\n            let response = await getTechnicsByRoom(room)\r\n            return response\r\n        }\r\n        getTechnics().then(response => setTechnics(response))\r\n    }, [])\r\n    return <Container>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <Typography>Перечень техники кабинета {room}</Typography>\r\n\r\n            </Grid>\r\n            <Grid item xs={12} style={{display: \"flex\",justifyContent: \"space-around\", flexWrap: \"wrap\"}}>\r\n\r\n                {technicsByRoom.map(obj => {\r\n                    return <Card style={{maxWidth: \"300px\", minWidth: \"300px\", marginTop: \"15px\"}}>\r\n                        {obj.user}\r\n                        <List>\r\n                            {\r\n                                layout.map(el => {\r\n                                   return  obj.properties.map(technic => {\r\n                                        if (el === technic.type) {\r\n                                            return <ListItem component={Link} to={`/technics/${technic.id}`}>\r\n                                                <ListItemIcon>\r\n                                                    <Avatar variant={\"square\"} src={images[technic.name]}></Avatar>\r\n                                                </ListItemIcon>\r\n                                                <ListItemText primary={technic.name} secondary={technic.type}/>\r\n                                            </ListItem>\r\n                                        }\r\n                                    })\r\n                                })\r\n                            }\r\n                        </List>\r\n\r\n                    </Card>\r\n                })}\r\n\r\n            </Grid>\r\n        </Grid>\r\n\r\n    </Container>\r\n}\r\n\r\nexport default RoomPage","D:\\PROJECTS\\tech\\src\\pages\\EventsPage\\EventsPage.jsx",["313","314"],"import React, {useEffect, useState} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Container} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n}));\r\n\r\n\r\nconst EventsPage = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Container>\r\n            <div>\r\n\r\n            </div>\r\n            <List className={classes.root}>\r\n                <ListItem alignItems=\"flex-start\">\r\n                    <ListItemAvatar>\r\n                        <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\"/>\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                        primary=\"Клевжиц А.Ю. изменил инвентарный номер в принтере HP 1005\"\r\n                        secondary={\r\n                            <React.Fragment>\r\n                                <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"body2\"\r\n                                    className={classes.inline}\r\n                                    color=\"textPrimary\"\r\n                                >\r\n                                    16.08.2021\r\n                                </Typography>\r\n                                {\" — Клевжиц А.Ю.\"}\r\n                            </React.Fragment>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n                <Divider variant=\"inset\" component=\"li\"/>\r\n                <ListItem alignItems=\"flex-start\">\r\n                    <ListItemAvatar>\r\n                        <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\"/>\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                        primary=\"Клевжиц А.Ю. изменил инвентарный номер в принтере HP 1005\"\r\n                        secondary={\r\n                            <React.Fragment>\r\n                                <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"body2\"\r\n                                    className={classes.inline}\r\n                                    color=\"textPrimary\"\r\n                                >\r\n                                    16.08.2021\r\n                                </Typography>\r\n                                {\" — Клевжиц А.Ю.\"}\r\n                            </React.Fragment>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n                <Divider variant=\"inset\" component=\"li\"/>\r\n                <ListItem alignItems=\"flex-start\">\r\n                    <ListItemAvatar>\r\n                        <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\"/>\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                        primary=\"Клевжиц А.Ю. изменил инвентарный номер в принтере HP 1005\"\r\n                        secondary={\r\n                            <React.Fragment>\r\n                                <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"body2\"\r\n                                    className={classes.inline}\r\n                                    color=\"textPrimary\"\r\n                                >\r\n                                    16.08.2021\r\n                                </Typography>\r\n                                {\" — Клевжиц А.Ю.\"}\r\n                            </React.Fragment>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n                <Divider variant=\"inset\" component=\"li\"/>\r\n                <ListItem alignItems=\"flex-start\">\r\n                    <ListItemAvatar>\r\n                        <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\"/>\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                        primary=\"Клевжиц А.Ю. изменил инвентарный номер в принтере HP 1005\"\r\n                        secondary={\r\n                            <React.Fragment>\r\n                                <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"body2\"\r\n                                    className={classes.inline}\r\n                                    color=\"textPrimary\"\r\n                                >\r\n                                    16.08.2021\r\n                                </Typography>\r\n                                {\" — Клевжиц А.Ю.\"}\r\n                            </React.Fragment>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n            </List>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default EventsPage","D:\\PROJECTS\\tech\\src\\pages\\LastRefuelingPage\\LastRefuelingPage.jsx",["315"],"import React, {useEffect} from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Link} from \"react-router-dom\";\r\nimport ControlledAccordions from \"../../components/Accordion\";\r\nimport {Container} from \"@material-ui/core\";\r\n\r\nconst LastRefuelingPage = ({allRefills, getAllRefills}) => {\r\n\r\n    useEffect(() => {\r\n        getAllRefills()\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <Paper>\r\n                    {allRefills ? <>\r\n                        <div>\r\n                            <ControlledAccordions array={allRefills}/>\r\n                        </div>\r\n                    </> : <Button component={Link} to={\"/printers\"}>Заполнить</Button>}\r\n                </Paper>\r\n            </Container>\r\n</>\r\n    )\r\n}\r\nexport default LastRefuelingPage","D:\\PROJECTS\\tech\\src\\pages\\PrintersPage\\PrintersPage.jsx",["316","317"],"import {\r\n    Button,\r\n    Container, Divider,\r\n\r\n} from \"@material-ui/core\";\r\nimport React, {useEffect, useState} from \"react\";\r\n\r\nimport StagesFueling from \"../../components/StagesFueling\";\r\nimport ListTechnics from \"../../components/ListTechnics\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst PrintersPage = ({\r\n                          allRefills,\r\n                          getPrintersAll,\r\n                          printers,\r\n                          addRefillForPrinter,\r\n                          updateCurrentRefills\r\n                      }) => {\r\n\r\n    useEffect(() => {\r\n        getPrintersAll()\r\n    }, [])\r\n\r\n    const [currentRefill, setCurrentRefill] = useState([])\r\n\r\n\r\n    const getCountRefill = (id) => {\r\n        let count = allRefills.filter(el => el.technicId === id).length\r\n        return count\r\n    }\r\n\r\n    const handlerRefills = (el) => {\r\n        debugger\r\n        let obj = {\r\n            \"technicId\": el.id,\r\n            \"name\": el.name,\r\n            \"user\": el.user,\r\n            \"createDate\": Date.now(),\r\n            \"countRefill\": getCountRefill(el.id) + 1\r\n        }\r\n        changeCategory(obj, 'new')\r\n    }\r\n    const changeCategory = (el, index) => {\r\n        let a = currentRefill.map((obj, i) => {\r\n            if (index === 3) {\r\n                index = 'finish'\r\n            }\r\n            if (index === 'new') {\r\n                if (i === 0) {\r\n                    return {\r\n                        name: obj.name,\r\n                        arr: [...obj.arr, el]\r\n                    }\r\n                } else {\r\n                    return {\r\n                        name: obj.name,\r\n                        arr: obj.arr\r\n                    }\r\n                }\r\n            } else if (index === 'finish') {\r\n                if (i === 3) {\r\n                    addRefillForPrinter(el.technicId, el)\r\n                    return {\r\n                        name: obj.name,\r\n                        arr: obj.arr.filter(elem => el.technicId !== elem.technicId)\r\n                    }\r\n                } else {\r\n                    return {\r\n                        name: obj.name,\r\n                        arr: [...obj.arr]\r\n                    }\r\n                }\r\n            } else {\r\n                if (i === index) {\r\n                    return {\r\n                        name: obj.name,\r\n                        arr: obj.arr.filter(elem => el.technicId !== elem.technicId)\r\n                    }\r\n                } else if (i === (index + 1)) {\r\n                    return {\r\n                        name: obj.name,\r\n                        arr: [...obj.arr, el]\r\n                    }\r\n                } else {\r\n                    return {\r\n                        name: obj.name,\r\n                        arr: obj.arr\r\n                    }\r\n                }\r\n\r\n            }\r\n        })\r\n        setCurrentRefill(a)\r\n        updateCurrentRefills(a)\r\n    }\r\n    return (\r\n        <Container>\r\n            <StagesFueling\r\n                changeCategory={changeCategory}\r\n                currentRefill={currentRefill}\r\n                setCurrentRefill={setCurrentRefill}\r\n            />\r\n            <Button component={Link} to={\"/printers/lastrefueling\"} variant=\"contained\">Последние заправки</Button>\r\n            <ListTechnics tech={printers} filters={false} handlerRefills={handlerRefills}/>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default PrintersPage","D:\\PROJECTS\\tech\\src\\pages\\TechnicPage\\TechnicPage.jsx",["318","319","320","321"],"import React, {useEffect, useState} from \"react\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Container,\r\n    Divider,\r\n    Grid, IconButton,\r\n    List, ListItem, ListItemAvatar, ListItemText,\r\n} from \"@material-ui/core\";\r\nimport {deepOrange} from '@material-ui/core/colors';\r\nimport ControlledAccordions from \"../../components/Accordion\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ListItemForm from \"../../components/ListItemForm\";\r\nimport Icon from \"../../components/Icon\";\r\nimport countDays from \"../../components/global/countDays\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {format} from \"date-fns\";\r\nimport images from \"../../components/global/images\";\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport LineWeightIcon from '@material-ui/icons/LineWeight';\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    avatarWrapper: {\r\n        padding: \"20px\",\r\n        textAlign: \"center\"\r\n    },\r\n    devider: {\r\n        margin: \"20px\"\r\n    },\r\n    avatar: {\r\n        width: theme.spacing(20),\r\n        height: theme.spacing(20),\r\n        margin: \"0 auto\",\r\n        color: theme.palette.getContrastText(deepOrange[500]),\r\n        backgroundColor: deepOrange[500],\r\n        cursor: \"pointer\"\r\n    },\r\n    technicInfoWrapper: {\r\n        padding: \"20px\"\r\n    },\r\n    listItemText: {\r\n        fontSize: '1.1em',\r\n        fontWeight: \"bold\"\r\n    },\r\n    paper: {\r\n        padding: \"10px\",\r\n        width: \"100%\"\r\n    },\r\n    repairs: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-around\"\r\n    },\r\n    repair: {\r\n        minWidth: \"200px\",\r\n        width: \"23%\",\r\n        textAlign: \"center\"\r\n    },\r\n    margin: {\r\n        margin: \"20px 0\"\r\n    }\r\n}))\r\nlet repair = [\r\n    {\r\n        id: '1',\r\n        application: '2017-05-25',\r\n        message: 'message',\r\n        dispatch: '2017-05-27',\r\n        getting: '2017-05-29'\r\n    },\r\n    {\r\n        id: '2',\r\n        application: '2017-05-25',\r\n        message: 'message',\r\n        dispatch: '2017-05-27',\r\n        getting: '2017-05-29'\r\n    },\r\n    {\r\n        id: '3',\r\n        application: '2017-05-25',\r\n        message: 'message',\r\n        dispatch: '2017-05-27',\r\n        getting: '2017-05-29'\r\n    },\r\n    {\r\n        id: '4',\r\n        application: '2017-05-25',\r\n        message: 'message',\r\n        dispatch: '2017-05-27',\r\n        getting: '2017-05-29'\r\n    },\r\n\r\n]\r\n\r\nconst TechnicPage = ({\r\n                         activeTechnic,\r\n                         getTechnicInfo,\r\n                         users,\r\n                         addComment,\r\n                         activeTechnicComments,\r\n                         getComments,\r\n                         getRefills,\r\n                         deleteTechnic,\r\n                         refills\r\n                     }) => {\r\n    useEffect(() => {\r\n        getTechnicInfo(params.id)\r\n        getComments(params.id)\r\n        getRefills(params.id)\r\n    }, [])\r\n\r\n    const classes = useStyles();\r\n    const params = useParams();\r\n    let history = useHistory();\r\n\r\n\r\n    const [aaa, setAaa] = useState(false)\r\n    const [bbb, setBbb] = useState(false)\r\n    const [ccc, setCcc] = useState(false)\r\n\r\n    const {register, handleSubmit, watch, formState: {errors}} = useForm();\r\n    const onSubmit = data => {\r\n        addComment(activeTechnic.id, data.msg)\r\n    };\r\n\r\n    const formatDate = (value) => {\r\n        return format(new Date(value), 'dd.MM.yyyy')\r\n    }\r\n    const deleteTech = (id) => {\r\n        deleteTechnic(id)\r\n        history.goBack()\r\n    } // Удалить объект по id / Переход на предыдущую страницу\r\n\r\n    return (\r\n        <Container>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={4}>\r\n                    <Paper>\r\n                        <div className={classes.avatarWrapper}>\r\n                            <Avatar\r\n                                variant={\"square\"}\r\n                                src={images[activeTechnic.name]}\r\n                                className={classes.avatar}\r\n                            >\r\n                            </Avatar>\r\n                            <Divider className={classes.devider}/>\r\n                            <ListItemForm activeTechnic={activeTechnic} property={\"type\"} text={\"Тип\"}/>\r\n                            <ListItemForm activeTechnic={activeTechnic} property={\"name\"} text={\"Наименование\"}/>\r\n\r\n                        </div>\r\n                    </Paper>\r\n                    <div style={{display: \"flex\", justifyContent: \"center\"}}>\r\n                        <IconButton aria-label=\"delete\" color={aaa ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => setAaa(!aaa)}>\r\n                            <SettingsIcon/>\r\n                        </IconButton>\r\n                        <IconButton aria-label=\"delete\" color={bbb ? \"primary\" : \"secondary\"}\r\n                                    onClick={() => setBbb(!bbb)}>\r\n                            <CommentIcon/>\r\n                        </IconButton>\r\n                        {\r\n                            ((activeTechnic.type === 'Принтер') || (activeTechnic.type === 'МФУ') || (activeTechnic.type === 'Ксерокс')) &&\r\n                            <IconButton aria-label=\"delete\" color={bbb ? \"primary\" : \"secondary\"}\r\n                                        onClick={() => setCcc(!ccc)}>\r\n                                <LineWeightIcon/>\r\n                            </IconButton>\r\n                        }\r\n                        <IconButton aria-label=\"delete\" onClick={() => deleteTech(params.id)}>\r\n                            <DeleteIcon/>\r\n                        </IconButton>\r\n                    </div> //Кнопки показать/скрыть\r\n\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                                Место установки\r\n                            </Typography>\r\n                            <Divider/>\r\n                            <List>\r\n                                <ListItemForm activeTechnic={activeTechnic} property={\"room\"} text={\"Кабинет\"}/>\r\n                                <ListItemForm activeTechnic={activeTechnic} property={\"build\"} text={\"Корпус\"}/>\r\n                                <ListItemForm activeTechnic={activeTechnic} property={\"user\"} text={\"ФИО сотрудника\"}\r\n                                              array={users}/>\r\n                                <ListItemForm activeTechnic={activeTechnic} property={\"date\"} text={\"Дата получения\"}/>\r\n                                <ListItemForm activeTechnic={activeTechnic} property={\"faculty\"} text={\"Факультет\"}/>\r\n                            </List>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                                Бухгалтерия\r\n                            </Typography>\r\n                            <Divider/>\r\n                            <ListItemForm activeTechnic={activeTechnic} property={\"invent\"} text={\"Инвентарный номер\"}/>\r\n                            <ListItemForm activeTechnic={activeTechnic} property={\"zavod\"} text={\"Заводской номер\"}/>\r\n                            <ListItemForm activeTechnic={activeTechnic} property={\"matfyo\"}\r\n                                          text={\"Материально-ответственное лицо\"}/>\r\n                            <ListItemForm activeTechnic={activeTechnic} property={\"year\"} text={\"Год выпуска\"}/>\r\n                            <ListItemForm activeTechnic={activeTechnic} property={\"print\"} text={\"Наклейка\"}/>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            {aaa && <Grid className={classes.margin} container spacing={2}>\r\n                <Paper className={classes.paper}>\r\n                    <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                        Комментарии\r\n                    </Typography>\r\n                    <Typography>Описание: {activeTechnic.desc}</Typography>\r\n                    <Typography>Проблема: {activeTechnic.problem}</Typography>\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                        <input defaultValue=\"test\" {...register(\"msg\")} />\r\n                        <input type=\"submit\"/>\r\n                    </form>\r\n                    <List>\r\n                        {activeTechnicComments.map((el, i) => {\r\n                            return <ListItem key={i}>\r\n                                <ListItemAvatar>\r\n                                    <Avatar>\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText primary={el.body} secondary={formatDate(el.date)}/>\r\n                            </ListItem>\r\n                        })}\r\n\r\n                    </List>\r\n\r\n\r\n                </Paper>\r\n\r\n            </Grid>}  {/*//Комментарии*/}\r\n\r\n            {bbb && <Grid container className={classes.margin} spacing={2}>\r\n                <Paper className={classes.paper}>\r\n                    <div style={{display: \"flex\"}}>\r\n                        <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                            Заявки на ремонт\r\n                        </Typography>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            endIcon={<Icon type={\"send\"}></Icon>}\r\n                        >\r\n                            Send\r\n                        </Button>\r\n                    </div>\r\n\r\n                    <div className={classes.repairs}>\r\n                        {repair.map(el => {\r\n                            return <Card className={classes.repair}>\r\n                                <CardContent>\r\n                                    <Typography>Дата заявки: {el.application}</Typography>\r\n                                    <Typography>Проблема: {el.message}</Typography>\r\n                                    <Typography>Дата передачи: {el.dispatch}</Typography>\r\n                                    <Typography>Дата получения: {el.getting}</Typography>\r\n                                    <Typography>Всего в ремонте: {countDays(el.dispatch, el.getting)}</Typography>\r\n\r\n                                </CardContent>\r\n                            </Card>\r\n                        })}\r\n                    </div>\r\n                </Paper>\r\n\r\n            </Grid>} {/*//Заявки на ремонт*/}\r\n            {ccc && <Grid container className={classes.margin} spacing={2}>\r\n                {\r\n                    ((activeTechnic.type === 'Принтер') || (activeTechnic.type === 'МФУ') || (activeTechnic.type === 'Ксерокс')) &&\r\n                    <Paper className={classes.paper}>\r\n                        <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                            Заправки\r\n                        </Typography>\r\n                        <Button component={Link} to={\"/printers\"} variant={\"contained\"}\r\n                                color={\"primary\"}>Заполнить</Button>\r\n                        <Typography variant={\"body2\"}>Максимальное количество\r\n                            заправок за год: 2</Typography>\r\n                        <Divider/>\r\n                        {/*<Steppers/>*/}\r\n\r\n                        {refills ? <>\r\n                            <div>\r\n\r\n                                <ControlledAccordions array={refills}/>\r\n                            </div>\r\n                        </> : <Button component={Link} to={\"/printers\"}>Заполнить</Button>}\r\n                    </Paper>\r\n                }\r\n            </Grid>} {/*//Последние заправки*/}\r\n\r\n            <Grid container className={classes.margin} spacing={2}>\r\n                <Paper className={classes.paper}>\r\n                    <div style={{display: \"flex\"}}>\r\n                        <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                            Техника в этом кабинете\r\n                        </Typography>\r\n                    </div>\r\n                    <div>\r\n                        <Button component={Link} to={`/room/${activeTechnic.room}`}>Техника кабинета</Button>\r\n\r\n                    </div>\r\n\r\n                </Paper>\r\n\r\n            </Grid> {/*//Техника в этом кабинете*/}\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TechnicPage;","D:\\PROJECTS\\tech\\src\\pages\\TypePage\\TypePage.jsx",["322","323"],"import {withRouter, useHistory, useLocation} from \"react-router-dom\";\r\nimport {\r\n    Button,\r\n    Container, DialogActions, DialogContent,\r\n    Divider,\r\n    Grid, IconButton, List, ListItem, ListItemSecondaryAction, ListItemText,\r\n    Paper, TextField\r\n} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport ListTypes from \"../../components/ListTypes\";\r\n\r\nimport ListTechnics from \"../../components/ListTechnics\";\r\nimport ActiveCategories from \"../../components/ActiveCategories\";\r\nimport FiltersTechnic from \"../../components/FiltersTechnic\";\r\nimport Modal from \"../../components/Modal\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport Choose from \"../../assets/img/undraw_Choose_re_7d5a.svg\"\r\nimport * as queryString from \"querystring\";\r\n\r\nimport {useStyles} from \"./TypePageStyle\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nconst schema = [\r\n    [\r\n        {type: \"name\", name: \"Наименование\"},\r\n        {type: \"type\", name: \"Тип\"},\r\n    ],\r\n    [\r\n        {type: \"room\", name: \"Кабинет\"},\r\n        {type: \"build\", name: \"Корпус\"},\r\n        {type: \"user\", name: \"ФИО сторудника\"},\r\n        {type: \"date\", name: \"Дата выдачи\"},\r\n        {type: \"faculty\", name: \"Факультет\"}\r\n    ],\r\n    [\r\n        {type: \"invent\", name: \"Инвентарный номер\"},\r\n        {type: \"zavod\", name: \"Заводской номер\"},\r\n        {type: \"matfyo\", name: \"Материально-ответственное лицо\"},\r\n        {type: \"year\", name: \"Год выпуска\"},\r\n    ]\r\n]\r\n\r\nconst TypePage = ({getTechnics, addTechnic, tech}) => {\r\n\r\n    let history = useHistory();\r\n    const {search} = useLocation()\r\n    const searchData = queryString.parse(search)\r\n    const classes = useStyles();\r\n    const [categories, setCategories] = useState(() => [])\r\n    const [activeTypes, setActiveTypes] = useState(() => [])\r\n    const [open, setOpen] = useState(false);\r\n    const {register, handleSubmit} = useForm();\r\n    // const handleClickOpen = () => {\r\n    //     setOpen(true);\r\n    // };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const onSubmit = data => addTechnic(data);\r\n    const handlerCategory = (prop, value) => {\r\n        let checkValueInObj = () => {\r\n            if (searchData[prop] === undefined) {\r\n                return value\r\n            } else {\r\n\r\n                if (searchData[prop].includes(value)) {\r\n                    return searchData[prop].split(',').filter(el => el !== value).join(',')\r\n                } else {\r\n                    return searchData[prop] + `,${value}`\r\n                }\r\n            }\r\n        }\r\n        let a = {...searchData, [prop]: checkValueInObj()}\r\n        let b = Object.entries(a).reduce((a, [k, v]) => (v ? (a[k] = v, a) : a), {})\r\n        let d = queryString\r\n            .stringify(b)\r\n            .replaceAll(\"%2C\", \",\")\r\n            .replaceAll(\"%3F\", \"\")\r\n        history.push({\r\n            search: d\r\n        })\r\n    }\r\n\r\n    const mergeObj = (obj) => {\r\n        return Object.keys(obj).map(el => {\r\n            if (el === `?type`) {\r\n                return \"\"\r\n            } else {\r\n                return obj[el].map((key) => {\r\n                    return {[el]: key}\r\n                })\r\n            }\r\n\r\n        }).flat().filter(n => n)\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        let obj = Object.keys(searchData).reduce(function (accum, currentVal) {\r\n            accum[currentVal] = searchData[currentVal].split(',');\r\n            return accum;\r\n        }, {})\r\n        setActiveTypes(obj.[\"?type\"])\r\n        setCategories(mergeObj(obj))\r\n    }, [search])\r\n\r\n    useEffect(() => {\r\n        getTechnics(activeTypes)  //Получение техники с сервера\r\n    }, [activeTypes])\r\n\r\n    return (\r\n        <Container>\r\n            {\r\n                (activeTypes !== undefined) && <Grid container className={classes.wrapperInfo} spacing={3}>\r\n                    <Grid item xs={3}>\r\n                        <Paper className={classes.paper}>\r\n                            <Typography color={\"primary\"}>Активные типы техники</Typography>\r\n                            <Divider/>\r\n                            <div className={classes.typeInfoWrapper}>\r\n                                <List dense>\r\n                                    {\r\n                                        (activeTypes) && <>\r\n                                            {\r\n                                                activeTypes.map(el => {\r\n                                                    return <ListItem button>\r\n                                                        <ListItemText primary={`${el} - 25 шт.`}/>\r\n                                                        <ListItemSecondaryAction>\r\n                                                            <IconButton onClick={() => handlerCategory(\"?type\", el)}>\r\n                                                                <CloseIcon />\r\n                                                            </IconButton>\r\n                                                        </ListItemSecondaryAction>\r\n                                                    </ListItem>\r\n                                                })\r\n                                            }\r\n                                        </>\r\n                                    }\r\n                                </List>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid> {/*  Тип, картинка */}\r\n                    <Grid item xs={9}>\r\n                        <Paper className={classes.paper}>\r\n                            <Typography color={\"primary\"}>Фильтрация</Typography>\r\n                            <Divider/>\r\n                            <FiltersTechnic categories={categories} handlerCategory={handlerCategory}/>\r\n                        </Paper>\r\n                    </Grid> {/*  Фильтрация*/}\r\n                </Grid>\r\n\r\n            }\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={8}>\r\n                    <ActiveCategories categories={categories} handlerCategory={handlerCategory}/>\r\n                    {\r\n                        (activeTypes)\r\n                            ? <ListTechnics tech={tech} categories={categories} setCategories={setCategories}/>\r\n                            : <Paper style={{padding: \"50px 180px\", marginTop: \"50px\"}}>\r\n                                <img width={400} src={Choose} alt=\"Выберите\"/>\r\n                                <Typography style={{marginTop: \"30px\"}} variant={\"h5\"}>Необходимо выбрать тип техники\r\n                                    =></Typography>\r\n                            </Paper>\r\n                    }\r\n\r\n                </Grid> {/*  Список техники по кабинетам*/}\r\n                <Grid item xs={4}>\r\n                    <ListTypes activeTypes={activeTypes} handlerCategory={handlerCategory}/>\r\n                </Grid> {/*  Список типов техникик */}\r\n            </Grid>\r\n            <Modal open={open} handleClose={handleClose} title={\"Добавить тип\"}>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                    <DialogContent>\r\n                        <div>\r\n                            {\r\n                                schema[0].map(el => {\r\n                                    return <TextField {...register(el.type)} label={el.name}/>\r\n                                })\r\n                            }\r\n                        </div>\r\n                        <div style={{display: \"flex\"}}>\r\n                            <div>\r\n                                {\r\n                                    schema[1].map(el => {\r\n                                        return <TextField {...register(el.type)} defaultValue={\"\"} label={el.name}/>\r\n                                    })\r\n                                }\r\n                            </div>\r\n                            <div>\r\n                                {\r\n                                    schema[2].map(el => {\r\n                                        return <TextField {...register(el.type)} label={el.name}/>\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        </div>\r\n\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button type=\"submit\">Submit</Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Modal>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withRouter(TypePage)\r\n","D:\\PROJECTS\\tech\\src\\pages\\Profile\\ProfilePage.jsx",["324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340"],"D:\\PROJECTS\\tech\\src\\pages\\SignInPage\\SignInPage.jsx",[],"D:\\PROJECTS\\tech\\src\\pages\\TypePage\\TypePageStyle.js",[],"D:\\PROJECTS\\tech\\src\\components\\global\\images.js",[],"D:\\PROJECTS\\tech\\src\\components\\global\\groupElementsByDate.js",["341"],"import formatDate from \"./formatDate\";\r\n\r\nconst groupElementsByDate = (array, property) => {\r\n    if (array) {\r\n        return array.reduce((previousValue, currentValue) => {\r\n            let b = formatDate(currentValue[property])\r\n            let objType = previousValue.find((element) => {\r\n                    let a = element[\"date\"]\r\n                    if (a === b) {\r\n                        return element\r\n                    }\r\n                }\r\n            );\r\n            if (!objType) {\r\n                const currentValueDDMMYYYY = formatDate(currentValue[property])\r\n                previousValue.push({\r\n                    \"date\": currentValueDDMMYYYY,\r\n                    properties: [currentValue]\r\n                });\r\n            } else {\r\n                objType.properties.push(currentValue);\r\n            }\r\n            return previousValue;\r\n        }, [])\r\n    } else {\r\n        return []\r\n    }\r\n\r\n}\r\nexport default groupElementsByDate",["342","343"],"D:\\PROJECTS\\tech\\src\\components\\Common\\TextError.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\ListTechnics\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\global\\formatDate.js",[],"D:\\PROJECTS\\tech\\src\\components\\ListTechnics\\ListTechnics.jsx",["344","345","346"],"import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Divider, List, Paper} from \"@material-ui/core\";\r\nimport Title from \"../Title\";\r\nimport MiniCardTechnic from \"../MiniCardTechnic\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    \"address\": {\r\n        textAlign: \"center\"\r\n    },\r\n    \"paper\": {\r\n        marginBottom: \"20px\"\r\n    }\r\n}));\r\n\r\nconst ListTechnics = ({getSchemaTechnics, schema, tech, categories, filters = true, handlerRefills}) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const [schemaTechnics, setSchemaTechnics] = useState('')\r\n    const [technics, setTechnics] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        getSchemaTechnics()\r\n    }, []) // Получение схемы кабинетов\r\n    useEffect(() => {\r\n        setSchemaTechnics(schema)\r\n    }, [schema]) // Записываем в useState схему\r\n    useEffect(() => {\r\n        if (tech.length !== 0) {\r\n            const isVisibleMinicard = (el) => {\r\n                if (filters === false) {\r\n                    return true\r\n                } else {\r\n                    let result = categories.some(element => {\r\n                        let aa = el.[Object.keys(element)]\r\n                        let bb = element.[Object.keys(element)]\r\n                        if (aa === bb) {\r\n                            return true\r\n                        } else {\r\n                            return false\r\n                        }\r\n                    })\r\n                    return result\r\n                }\r\n\r\n            }\r\n            let bbb = tech.map(el => {\r\n                if (isVisibleMinicard(el)) {\r\n                    return {...el, \"visible\": true}\r\n                } else {\r\n                    if (categories.length === 0) {\r\n                        return {...el, \"visible\": true}\r\n                    } else {\r\n                        return {...el, \"visible\": false}\r\n                    }\r\n                }\r\n            })\r\n            setTechnics(bbb)\r\n        }\r\n    }, [tech]) // Скрываем элементы при фильтрации\r\n\r\n    return (\r\n\r\n\r\n        <>\r\n            {\r\n                (schemaTechnics) && <>\r\n                    {schemaTechnics.map(build => {\r\n                            if (technics.some(buildElement => buildElement.build === build.build)) {\r\n                                return <CardBuild key={build.build} classes={classes} build={build} technics={technics}\r\n                                                  filters={filters} handlerRefills={handlerRefills}/>\r\n                            } else {\r\n                                return null\r\n                            }\r\n                        }\r\n                    )}\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListTechnics\r\n\r\n\r\nconst CardBuild = ({classes, build, technics, handlerRefills, filters}) => {\r\n    const isDisplayedBlock = (obj) => {\r\n        let b = technics.some(element => {\r\n            if (obj.rooms.includes(element.room)) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        })\r\n        return b\r\n    } // Проверка, отображаем ли пустой блок\r\n\r\n    return <Paper className={classes.paper}>\r\n        <Title className={classes.address} text={build.address}/>\r\n        {\r\n            build.blocks.map((block, i) => {\r\n                    if (isDisplayedBlock(block)) {\r\n                        return <CardBlock key={i} block={block} technics={technics} build={build} filters={filters}  handlerRefills={handlerRefills}/>\r\n                    } else {\r\n                        return false\r\n                    }\r\n\r\n                }\r\n            )\r\n        }\r\n        <Divider/>\r\n    </Paper>\r\n}\r\nconst CardBlock = ({block, technics, build, handlerRefills, filters}) => {\r\n    return <>\r\n        {\r\n            block.rooms.map(room => {\r\n                if (technics.some(el => ((el.room === room) && (el.visible !== false)))) {\r\n                    return <div key={room}>\r\n                        <Typography>{block.name} <Link to={`/room/${room}`}>{room} кабинет</Link></Typography>\r\n                        {\r\n                            technics && <CardRoom technics={technics} room={room} filters={filters}  build={build} handlerRefills={handlerRefills}/>\r\n                        }\r\n                        <Divider/>\r\n                    </div>\r\n                } else {\r\n                    return false\r\n                }\r\n            })}</>\r\n}\r\nconst CardRoom = ({technics, room, build, handlerRefills, filters}) => {\r\n    return <List dense>\r\n        {\r\n            technics.map((element, i) => {\r\n                if ((element.room === room) && (element.build === build.build) && (element.visible !== false)) {\r\n                    return <MiniCardTechnic key={i} el={element} filters={filters}  handlerRefills={handlerRefills}/>\r\n                }\r\n            })\r\n        }\r\n    </List>\r\n}\r\n","D:\\PROJECTS\\tech\\src\\components\\MiniCardTechnic\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Title\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Title\\Title.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\MiniCardTechnic\\MiniCardTechnic.jsx",["347","348","349"],"import {\r\n    Button,\r\n    Chip, IconButton,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemSecondaryAction,\r\n    ListItemText, Tooltip\r\n} from \"@material-ui/core\";\r\nimport {Link} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport images from \"../global/images\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport PlaylistAddIcon from '@material-ui/icons/PlaylistAdd';\r\nimport ReportProblemIcon from '@material-ui/icons/ReportProblem';\r\nimport WarningData from \"../WarningData/WarningData\";\r\n\r\nconst MiniCardTechnic = ({el, keys, handlerRefills, filters}) => {\r\n\r\n    return (\r\n        <ListItem component={Link} key={el} to={`/technics/${el.id}`} button>\r\n\r\n            <ListItemIcon>\r\n                <Avatar variant={\"square\"} src={images[el.name]}></Avatar>\r\n            </ListItemIcon>\r\n            <ListItemText\r\n                primary={`[${!el.invent ?\r\n                    <Button color=\"secondary\">Заполнить</Button> : el.invent}] - ${el.name}`}\r\n                secondary={`${el.year} ${el.user}`}\r\n            />\r\n            <ListItemSecondaryAction style={{display: \"flex\"}}>\r\n                <WarningData keys={keys} el={el}/>\r\n                {\r\n                    (filters === false) && <IconButton onClick={() => handlerRefills(el)}>\r\n                        <PlaylistAddIcon/>\r\n                    </IconButton>\r\n\r\n                }\r\n\r\n\r\n            </ListItemSecondaryAction>\r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default MiniCardTechnic","D:\\PROJECTS\\tech\\src\\components\\WarningData\\WarningData.jsx",["350"],"import ReportProblemIcon from \"@material-ui/icons/ReportProblem\";\r\nimport {IconButton, Popover, Tooltip} from \"@material-ui/core\";\r\nimport React from 'react';\r\n\r\nconst WarningData = ({keys,el}) => {\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const open = Boolean(anchorEl);\r\n    const id = open ? 'simple-popover' : undefined;\r\n\r\n    return <>\r\n        <IconButton  onClick={handleClick}>\r\n            <ReportProblemIcon/>\r\n        </IconButton>\r\n        <Popover\r\n            id={id}\r\n            open={open}\r\n            anchorEl={anchorEl}\r\n            onClose={handleClose}\r\n            anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'center',\r\n            }}\r\n            transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'center',\r\n            }}\r\n        >\r\n            <div>\r\n                {Object.keys(keys).map(key => {\r\n                    if (!el[keys[key].key]) {\r\n                        return <Tooltip key={key} title={keys[key].name}><span style={{\r\n                            display: \"block\",\r\n                            width: \"10px\",\r\n                            textAlign: \"center\",\r\n                            color: \"white\",\r\n                            marginRight: \"2px\",\r\n                            background: keys[key].bg\r\n                        }}>!</span></Tooltip>\r\n                    }\r\n                })}\r\n            </div>\r\n        </Popover>\r\n    </>\r\n\r\n}\r\n\r\nexport default WarningData\r\n\r\n","D:\\PROJECTS\\tech\\src\\components\\global\\countDays.js",[],"D:\\PROJECTS\\tech\\src\\components\\Portfolio\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Profile\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Modal\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\FiltersTechnic\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\ActiveCategories\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\ListTypes\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Icon\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\ListItemForm\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Accordion\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\StagesFueling\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Portfolio\\Portfolio.jsx",["351"],"import {withRouter} from \"react-router\";\r\nimport React from \"react\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\n\r\nconst Portfolio = () => {\r\n\r\n\r\n    return (\r\n        <>\r\n            <Paper>\r\n                ПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолио\r\n                ПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолио\r\n                ПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолио\r\n                ПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолиоПортфолио\r\n            </Paper>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(Portfolio);","D:\\PROJECTS\\tech\\src\\components\\Profile\\Profile.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\Modal\\Modal.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\FiltersTechnic\\FiltersTechnic.jsx",["352"],"import React, {useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport {List, ListItem, ListItemText} from \"@material-ui/core\";\r\nimport Icon from \"../Icon\";\r\nimport getProperty from \"../global/getProperty\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n        display: 'flex',\r\n        height: 224,\r\n    },\r\n    tabs: {\r\n        width: \"30%\",\r\n        borderRight: `1px solid ${theme.palette.divider}`,\r\n    },\r\n    statisticItems: {\r\n        height: \"180px\",\r\n        overflow: \"auto\"\r\n    },\r\n    tabPanel: {\r\n        width: \"70%\",\r\n    },\r\n    active: {\r\n        background: \"red\"\r\n    }\r\n}));\r\n\r\n\r\nconst FiltersTechnics = ({getStatistic, technics, paramsTechnics, statistics, categories, handlerCategory}) => {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n    let val = paramsTechnics[value].property\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n    useEffect(() => {\r\n        getStatistic(val)\r\n    }, [value, technics])\r\n    return (\r\n        <div className={classes.root}>\r\n            <Tabs\r\n                orientation=\"vertical\"\r\n                variant=\"scrollable\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                aria-label=\"Vertical tabs example\"\r\n                className={classes.tabs}\r\n            >\r\n                {paramsTechnics.map((el, i) => {\r\n                    return <Tab key={i} label={el.title} {...a11yProps(i)} />\r\n                })}\r\n\r\n            </Tabs>\r\n\r\n            {paramsTechnics.map((el, i) => {\r\n                return <TabPanel\r\n                    className={classes.tabPanel}\r\n                    value={value} index={i}>\r\n                    <List key={i} className={classes.statisticItems}>\r\n                        {\r\n                            statistics.map((obj,i) => {\r\n                                let prop = getProperty(obj)\r\n                                let abbreviation = obj.[val]\r\n                                if (val === 'faculty') {\r\n                                    abbreviation = obj.[val]\r\n                                }\r\n                                const isContains = () => {\r\n                                    let a = categories.some(el => {\r\n                                        if (obj[prop] === el[prop]) {\r\n                                            return true\r\n                                        } else {\r\n                                            return false\r\n                                        }\r\n                                    })\r\n                                    return a\r\n                                }\r\n                                return <ListItem key={i} onClick={() => handlerCategory(val, (obj.[val]))} button\r\n                                                 className={isContains() ? classes.active : null}>\r\n                                    <Icon type={val}/>\r\n                                    <ListItemText\r\n                                        primary={`${abbreviation || 'Не указано'} - ${obj.properties.length} шт`}/>\r\n                                </ListItem>\r\n                            })\r\n                        }\r\n                    </List>\r\n\r\n                </TabPanel>\r\n            })}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst a11yProps = (index) => {\r\n    return {\r\n        id: `vertical-tab-${index}`,\r\n        'aria-controls': `vertical-tabpanel-${index}`,\r\n    };\r\n}\r\nconst TabPanel = (props) => {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`vertical-tabpanel-${index}`}\r\n            aria-labelledby={`vertical-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default FiltersTechnics","D:\\PROJECTS\\tech\\src\\components\\ActiveCategories\\ActiveCategories.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\ListTypes\\ListTypes.jsx",["353"],"import {\r\n    Button, DialogActions, DialogContent,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemSecondaryAction,\r\n    ListItemText,\r\n    ListSubheader, TextField\r\n} from \"@material-ui/core\";\r\nimport {DeleteOutline} from \"@material-ui/icons\";\r\nimport React, {useEffect} from \"react\";\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Modal from \"../Modal\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport Icon from \"../Icon\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    activeType: {\r\n        background: \"#d5d5d5\"\r\n    }\r\n}));\r\n\r\nconst ListTypes = ({types, deleteType, getTypes, addType, handlerCategory, activeTypes}) => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n    const {register, handleSubmit} = useForm();\r\n    const onSubmit = data => addType(data);\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    useEffect(() => {\r\n        getTypes()\r\n    }, [])\r\n    const isActiveType = (name) => {\r\n        if (activeTypes) {\r\n            if (activeTypes.includes(name)) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    return (\r\n        <>\r\n            {types &&\r\n            <List subheader={<ListSubheader>Settings</ListSubheader>}>\r\n                {types.map(el => {\r\n                        return <ListItem\r\n                            button\r\n                            onClick={() => handlerCategory(\"?type\", el.name)}\r\n                            className={isActiveType(el.name) ? classes.activeType : \"\"}\r\n\r\n                        >\r\n                            <ListItemIcon>\r\n                                <Icon type={el.type}/>\r\n                            </ListItemIcon>\r\n                            <ListItemText id=\"switch-list-label-wifi\" primary={el.name}/>\r\n                            <ListItemSecondaryAction>\r\n                                <DeleteOutline onClick={() => deleteType(el.id)}/>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    }\r\n                )}\r\n            </List>\r\n            }\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.button}\r\n                startIcon={<CloudUploadIcon/>} onClick={handleClickOpen}>\r\n                Добавить тип\r\n            </Button>\r\n\r\n            <Modal open={open} handleClose={handleClose} title={\"Добавить тип\"}>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                    <DialogContent>\r\n                        <TextField {...register(\"type\")} defaultValue=\"type\"/>\r\n                        <TextField {...register(\"name\")} defaultValue=\"name\"/>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button type=\"submit\">Submit</Button>\r\n                    </DialogActions>\r\n                </form>\r\n\r\n\r\n            </Modal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListTypes\r\n\r\n","D:\\PROJECTS\\tech\\src\\components\\Icon\\Icon.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\ListItemForm\\ListItemForm.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\Accordion\\Accordion.jsx",["354"],"import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport countDays from \"../global/countDays\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        flexBasis: '33.33%',\r\n        flexShrink: 0,\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    details: {\r\n        flexDirection: \"column\"\r\n    }\r\n}));\r\n\r\nexport default function ControlledAccordions({array}) {\r\n\r\n    const classes = useStyles();\r\n    const [expanded, setExpanded] = React.useState(false);\r\n\r\n    const handleChange = (panel) => (event, isExpanded) => {\r\n        setExpanded(isExpanded ? panel : false);\r\n    };\r\n\r\n    function groupByMonthWeek(data) {\r\n        let year, month, week\r\n        return data.reduce(function (acc, obj) {\r\n            let b;\r\n            if (typeof obj.receiverDate === 'string') {\r\n                b = new Date(obj.receiverDate).toLocaleDateString().split(/\\D/)\r\n            } else if (typeof obj.receiverDate === 'number') {\r\n                b = new Date(obj.receiverDate).toLocaleDateString().split(/\\D/)\r\n            }\r\n            // Get custom week number, zero padded\r\n            let weekNum = Math.ceil(b[2]/7);\r\n\r\n            // Add year if not already present\r\n            if (!acc[b[2]]) acc[b[2]] = {};\r\n            year = acc[b[2]];\r\n\r\n            // Add month if not already present\r\n            if (!year[b[1]]) year[b[1]] = {};\r\n            month = year[b[1]];\r\n\r\n            // Add week if not already present\r\n            if (!month[weekNum]) month[weekNum] = [];\r\n\r\n            // Add object to  week\r\n            month[weekNum].push(obj);\r\n\r\n            return acc;\r\n        }, Object.create(null));\r\n    }\r\n\r\n        const group = groupByMonthWeek(array)\r\n\r\n    // const refillsGroup = (arr) => {\r\n    //     let years = arr.map(el => {\r\n    //         let date = new Date(el.receiverDate).getFullYear()\r\n    //\r\n    //         return date\r\n    //     }).sort((a, b) => b - a)\r\n    //     let uniqueYears = [...new Set(years.map((year) => year))]\r\n    //\r\n    //     // return uniqueYears.map(year => {\r\n    //     //     return <>\r\n    //     {/*        <p>{year} год</p>*/}\r\n    //     {/*        <ul>*/}\r\n    //     {/*            {arr.map((el) => {*/}\r\n    //     //                 if (new Date(el.receiverDate).getFullYear() === year) {\r\n    //                         return <Accordion expanded={expanded === el.id} onChange={handleChange(el.id)}>\r\n    //                          <AccordionSummary\r\n    //                                  expandIcon={<ExpandMoreIcon/>}\r\n    //                               aria-controls={`${el.id}bh-content`}\r\n    //                                 id={`${el.id}bh-content`}\r\n    //                        >\r\n    //                                <Typography className={classes.heading}>{el.receiverDate}</Typography>\r\n    //                                 <Typography className={classes.secondaryHeading}>{el.receiverName}</Typography>\r\n    //                              </AccordionSummary>\r\n    //                              <AccordionDetails className={classes.details}>\r\n    //                                <Typography variant={\"p\"}>Дата заявки: {el.report}</Typography>\r\n    //                                 <Typography variant={\"p\"}><Typography variant={\"subtitle2\"}\r\n    //                                                                      component={\"span\"}>({countDays(el.report, el.transmissionDate)} дней)</Typography> Дата\r\n    //                                   передачи картриджей в ЦРИТ: {el.transmissionDate}</Typography>\r\n    //                                <Typography variant={\"p\"}><Typography variant={\"subtitle2\"}\r\n    //                                                                      component={\"span\"}>({countDays(el.report, el.dateOfReceiving)} дней)</Typography> Дата*/}\r\n    //                                     получения картриджей из ЦРИТ: {el.dateOfReceiving}</Typography>\r\n    //                                <Typography variant={\"p\"}><Typography variant={\"subtitle2\"}\r\n    //                                                                      component={\"span\"}>({countDays(el.report, el.receiverDate)} дней)</Typography>Выдача\r\n    //                                    сотруднику: {el.receiverDate}</Typography>\r\n    //                              <Typography variant={\"p\"}>Сотрудник, который получил\r\n    //                                     картридж: {el.receiverName}</Typography>\r\n    //                          </AccordionDetails>\r\n    //                         </Accordion>\r\n    //     //                 }\r\n    //     //                 return ''\r\n    //     //             })}\r\n    //     //         </ul>\r\n    //     //     </>\r\n    //     // })\r\n    // }\r\n    return (\r\n        <div className={classes.root}>\r\n            {\r\n                Object.keys(group).map(year => {\r\n                    return <div>\r\n                        <h2 key={year}>{year}</h2>\r\n                        <div>\r\n                            {\r\n                                Object.keys(group[year]).map(month => {\r\n                                    return <div>\r\n                                        <h2>{month}</h2>\r\n                                        <div>\r\n                                            {\r\n                                                Object.keys(group[year][month]).map(el => {\r\n                                                    return group[year][month][el].map(el => {\r\n                                                        return <Accordion expanded={expanded === el.id} onChange={handleChange(el.id)}>\r\n                                                            <AccordionSummary\r\n                                                                expandIcon={<ExpandMoreIcon/>}\r\n                                                                aria-controls={`${el.id}bh-content`}\r\n                                                                id={`${el.id}bh-content`}\r\n                                                            >\r\n                                                                <Typography className={classes.heading}>{el.name}</Typography>\r\n                                                                <Typography className={classes.secondaryHeading}>{el.user}</Typography>\r\n                                                            </AccordionSummary>\r\n                                                            <AccordionDetails className={classes.details}>\r\n                                                                <Typography variant={\"p\"}>Дата заявки: {el.report}</Typography>\r\n                                                                <Typography variant={\"p\"}><Typography variant={\"subtitle2\"}\r\n                                                                                                      component={\"span\"}>({countDays(el.report, el.transmissionDate)} дней)</Typography> Дата\r\n                                                                    передачи картриджей в ЦРИТ: {el.transmissionDate}</Typography>\r\n                                                                <Typography variant={\"p\"}><Typography variant={\"subtitle2\"}\r\n                                                                                                      component={\"span\"}>({countDays(el.report, el.dateOfReceiving)} дней)</Typography> Дата*/}\r\n                                                                    получения картриджей из ЦРИТ: {el.dateOfReceiving}</Typography>\r\n                                                                <Typography variant={\"p\"}><Typography variant={\"subtitle2\"}\r\n                                                                                                      component={\"span\"}>({countDays(el.report, el.receiverDate)} дней)</Typography>Выдача\r\n                                                                    сотруднику: {el.receiverDate}</Typography>\r\n                                                                <Typography variant={\"p\"}>Сотрудник, который получил\r\n                                                                    картридж: {el.receiverName}</Typography>\r\n                                                            </AccordionDetails>\r\n                                                        </Accordion>\r\n                                                    })\r\n                                                })\r\n                                            }\r\n                                        </div>\r\n                                    </div>\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","D:\\PROJECTS\\tech\\src\\components\\StagesFueling\\StagesFueling.jsx",["355","356","357","358"],"import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardContent, DialogActions, DialogContent, DialogContentText,\r\n    IconButton,\r\n    List,\r\n    ListItem,\r\n    ListItemSecondaryAction,\r\n    ListItemText,\r\n    Menu, MenuItem\r\n} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\r\nimport Modal from \"../Modal\";\r\nimport {makeStyles} from \"@material-ui/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    copyText: {\r\n        marginLeft: \"10px\",\r\n        border: \"1px solid #a0a0a0\",\r\n        borderRadius: \"7px\",\r\n        cursor: \"pointer\",\r\n        padding: \"6px\",\r\n        '&:hover': {\r\n            backgroundColor: '#e6e6e6'\r\n        }\r\n    },\r\n}))\r\n\r\nconst StagesFueling = ({getCurrentRefills, addRefillForPrinter, setCurrentRefill, currentRefill, changeCategory}) => {\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        async function fetchCurrentRefills() {\r\n            let response = await getCurrentRefills()\r\n            setCurrentRefill(response)\r\n            return response\r\n        }\r\n\r\n        fetchCurrentRefills()\r\n    }, [])\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [activeElement, setActiveElement] = useState('')\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n\r\n    const handleClick = (event, el) => {\r\n        setActiveElement(el)\r\n        setOpen(true)\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose1 = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {currentRefill && <div style={{display: \"flex\", justifyContent: \"space-evenly\", margin: \"20px 0\"}}>\r\n                {currentRefill.map((obj, i) => {\r\n                    return <Card style={{width: \"23%\"}}>\r\n                        <CardContent>\r\n                            <Typography variant={\"h6\"}>{obj.name}</Typography>\r\n                            <List dense>\r\n                                {obj.arr.map(el => {\r\n                                    return <ListItem onDoubleClick={() => changeCategory(el, i)} button>\r\n                                        <ListItemText primary={`[${el.countRefill || 1}]  ${el.name}`}\r\n                                                      secondary={`${el.user}`}></ListItemText>\r\n                                        <ListItemSecondaryAction>\r\n                                            <IconButton color=\"secondary\" aria-controls=\"simple-menu\"\r\n                                                        aria-haspopup=\"true\"\r\n                                                        onClick={(e) => handleClick(e, el)}>\r\n                                                <ArrowDropDownIcon/>\r\n                                            </IconButton>\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                })}\r\n                            </List>\r\n                        </CardContent>\r\n                    </Card>\r\n                })\r\n                }\r\n\r\n            </div>}\r\n            <Menu\r\n                id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <MenuItem onClick={handleClose}>Далее</MenuItem>\r\n                <MenuItem onClick={handleClose}>Информация</MenuItem>\r\n                <MenuItem onClick={handleClose}>Удалить</MenuItem>\r\n            </Menu>\r\n            <Modal open={open} handleClose={handleClose} title={\"Добавить тип\"}>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Ссылка на заполнение (старых/пустых) картриджей - <a target={\"_blank\"}\r\n                                                                             href=\"https://docs.google.com/forms/d/e/1FAIpQLSfwyQfBoHyUEOBPXQfIfcq4CTGpxdW3SxuR842KNBWhLMqo_w/viewform\">здесь</a>\r\n                    </DialogContentText>\r\n                    <Typography>ФИО ответственного лица\r\n                        <Typography className={classes.copyText} component={\"span\"} onClick={() => {\r\n                            navigator.clipboard.writeText('Клевжиц Александр Юрьевич')\r\n                        }}>Клевжиц Александр Юрьевич</Typography>\r\n                    </Typography>\r\n                    <Typography>Адрес электронной почты\r\n                        <Typography className={classes.copyText} component={\"span\"} onClick={() => {\r\n                            navigator.clipboard.writeText('ipkip.bspu@gmail.com@bspu.by')\r\n                        }}>ipkip.bspu@gmail.com</Typography>\r\n                    </Typography>\r\n                    <Typography>Номер кабинета\r\n                        <Typography className={classes.copyText} component={\"span\"} onClick={() => {\r\n                            navigator.clipboard.writeText('Запрос')\r\n                        }}>Запрос</Typography>\r\n                    </Typography>\r\n                    <Typography>Год выпуска\r\n                        <Typography className={classes.copyText} component={\"span\"} onClick={() => {\r\n                            navigator.clipboard.writeText('Запрос')\r\n                        }}>Запрос</Typography>\r\n                    </Typography>\r\n                    <Typography>Инвентарный номер оргтехники\r\n                        <Typography className={classes.copyText} component={\"span\"} onClick={() => {\r\n                            navigator.clipboard.writeText('Запрос')\r\n                        }}>Запрос</Typography>\r\n                    </Typography>\r\n                    <Typography>Модель оргтехники и номер картриджа\r\n                        <Typography className={classes.copyText} component={\"span\"} onClick={() => {\r\n                            navigator.clipboard.writeText('Запрос')\r\n                        }}>Запрос</Typography>\r\n                    </Typography>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose1} color=\"primary\">\r\n                        Отмена\r\n                    </Button>\r\n                    <Button onClick={handleClose1} color=\"primary\">\r\n                        Subscribe\r\n                    </Button>\r\n                </DialogActions>\r\n\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default StagesFueling","D:\\PROJECTS\\tech\\src\\components\\global\\getProperty.js",[],"D:\\PROJECTS\\tech\\src\\components\\global\\global.js",[],"D:\\PROJECTS\\tech\\src\\components\\AutocompleteTextarea\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\AutocompleteTextarea\\AutocompleteTextarea.jsx",["359"],"import {IconButton, TextField} from \"@material-ui/core\";\r\nimport Autocomplete, {createFilterOptions} from \"@material-ui/lab/Autocomplete\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    }\r\n}))\r\n\r\nconst filter = createFilterOptions();\r\n\r\nconst AutocompleteTextarea = ({\r\n                                  activeTechnic,\r\n                                  property,\r\n                                  updateTechnic,\r\n                                  setEditMode,\r\n                                  getDataAutocomplete,\r\n                                  text,\r\n                                  autocompleteData\r\n                              }) => {\r\n    const classes = useStyles()\r\n    const [array, setArray] = useState([''])\r\n    const [value, setValue] = useState(null)\r\n\r\n    const {register, handleSubmit, control, reset} = useForm();\r\n\r\n    useEffect(() => {\r\n        getDataAutocomplete(property)\r\n    }, [])\r\n    useEffect(() => {\r\n        setArray(autocompleteData)\r\n    }, [autocompleteData])\r\n\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            handleSubmit(onSubmit)();\r\n            setArray([])\r\n        }\r\n        if (e.key === 'Escape') {\r\n            setEditMode(false)\r\n        }\r\n    }\r\n    const selectItem = (event, newValue) => {\r\n        if (typeof newValue === 'string') {\r\n            setValue({\r\n                [property]: newValue,\r\n            });\r\n        } else if (newValue && newValue.inputValue) {\r\n            setValue({\r\n                [property]: newValue.inputValue,\r\n            });\r\n        } else {\r\n            setValue(newValue);\r\n            debugger\r\n        }\r\n    }\r\n    const onSubmit = (obj) => {\r\n        if (obj[property] === undefined) {\r\n            let val = {\r\n                [property]: value[property]\r\n            }\r\n            updateTechnic(activeTechnic.id, val)\r\n            setEditMode(false)\r\n            reset()\r\n        } else {\r\n            updateTechnic(activeTechnic.id, obj)\r\n            setEditMode(false)\r\n            reset()\r\n        }\r\n    }\r\n    const handleClickAway = () => {\r\n        setEditMode(false)\r\n        setArray('')\r\n    };\r\n    return (\r\n        <form className={classes.root} onSubmit={handleSubmit(onSubmit)}>\r\n\r\n            {\r\n                ((property === 'date') || (property === 'year')) &&\r\n                <ClickAwayListener onClickAway={handleClickAway}><TextField\r\n                    id=\"date\"\r\n                    label={text}\r\n                    type=\"date\"\r\n                    {...register(property)}\r\n                    defaultValue=\"2017-05-24\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                /></ClickAwayListener>\r\n            }\r\n\r\n            {\r\n                ((property === 'invent') || (property === 'zavod')) &&\r\n                <ClickAwayListener onClickAway={handleClickAway}>\r\n                    <TextField onKeyDown={handleKeyDown} defaultValue={activeTechnic[property]}\r\n                               autoFocus={true} {...register(property)} />\r\n                </ClickAwayListener>\r\n            }\r\n\r\n            {\r\n                (\r\n                    (property === 'room')\r\n                    || (property === 'build')\r\n                    || (property === 'user')\r\n                    || (property === 'faculty')\r\n                    || (property === 'matfyo')\r\n                    || (property === 'type')\r\n                    || (property === 'name')\r\n                ) &&\r\n                <Controller\r\n                    name={property}\r\n                    control={control}\r\n                    render={({field}) =><Autocomplete\r\n                        filterOptions={(options, params) => {\r\n                            const filtered = filter(options, params);\r\n                            if (params.inputValue !== '') {\r\n                                filtered.push({\r\n                                    inputValue: params.inputValue,\r\n                                    [property]: `Add \"${params.inputValue}\"`,\r\n                                });\r\n                            }\r\n                            return filtered;\r\n                        }}\r\n                        selectOnFocus\r\n                        defaultValue={activeTechnic[property]}\r\n                        clearOnBlur\r\n                        onKeyDown={handleKeyDown}\r\n                        onChange={selectItem}\r\n                        handleHomeEndKeys\r\n                        id=\"free-solo-with-text-demo\"\r\n                        options={array}\r\n                        getOptionLabel={(option) => {\r\n                            if (typeof option === 'string') {\r\n                                return option;\r\n                            }\r\n                            if (option.inputValue) {\r\n                                return option.inputValue;\r\n                            }\r\n                            return option[property];\r\n                        }}\r\n                        renderOption={(option) => option[property]}\r\n                        style={{width: 250}}\r\n                        freeSolo\r\n                        renderInput={(field) => (\r\n                            <TextField autoFocus={true} {...field} label={text} variant=\"outlined\"/>\r\n                        )}\r\n                    />\r\n\r\n\r\n                    }\r\n                />\r\n            }\r\n\r\n            <div>\r\n                <IconButton\r\n                    color=\"primary\" aria-label=\"upload picture\" type=\"submit\"\r\n                >\r\n                    <SaveIcon/>\r\n                </IconButton>\r\n            </div>\r\n        </form>)\r\n}\r\n\r\nexport default AutocompleteTextarea",{"ruleId":"360","replacedBy":"361"},{"ruleId":"362","replacedBy":"363"},{"ruleId":"364","severity":1,"message":"365","line":12,"column":12,"nodeType":"366","messageId":"367","endLine":12,"endColumn":20},{"ruleId":"368","severity":1,"message":"369","line":19,"column":8,"nodeType":"370","endLine":19,"endColumn":10,"suggestions":"371"},{"ruleId":"372","severity":1,"message":"373","line":34,"column":71,"nodeType":"374","messageId":"375","endLine":34,"endColumn":73},{"ruleId":"364","severity":1,"message":"376","line":1,"column":16,"nodeType":"366","messageId":"367","endLine":1,"endColumn":25},{"ruleId":"364","severity":1,"message":"377","line":1,"column":27,"nodeType":"366","messageId":"367","endLine":1,"endColumn":35},{"ruleId":"368","severity":1,"message":"378","line":12,"column":8,"nodeType":"370","endLine":12,"endColumn":10,"suggestions":"379"},{"ruleId":"364","severity":1,"message":"380","line":3,"column":16,"nodeType":"366","messageId":"367","endLine":3,"endColumn":23},{"ruleId":"368","severity":1,"message":"381","line":22,"column":8,"nodeType":"370","endLine":22,"endColumn":10,"suggestions":"382"},{"ruleId":"368","severity":1,"message":"383","line":117,"column":8,"nodeType":"370","endLine":117,"endColumn":10,"suggestions":"384"},{"ruleId":"364","severity":1,"message":"385","line":128,"column":36,"nodeType":"366","messageId":"367","endLine":128,"endColumn":41},{"ruleId":"364","severity":1,"message":"386","line":128,"column":55,"nodeType":"366","messageId":"367","endLine":128,"endColumn":61},{"ruleId":"387","severity":1,"message":"388","line":178,"column":27,"nodeType":"389","endLine":180,"endColumn":17},{"ruleId":"368","severity":1,"message":"390","line":106,"column":8,"nodeType":"370","endLine":106,"endColumn":16,"suggestions":"391"},{"ruleId":"368","severity":1,"message":"392","line":110,"column":8,"nodeType":"370","endLine":110,"endColumn":21,"suggestions":"393"},{"ruleId":"364","severity":1,"message":"394","line":1,"column":9,"nodeType":"366","messageId":"367","endLine":1,"endColumn":18},{"ruleId":"364","severity":1,"message":"395","line":1,"column":20,"nodeType":"366","messageId":"367","endLine":1,"endColumn":25},{"ruleId":"364","severity":1,"message":"396","line":1,"column":27,"nodeType":"366","messageId":"367","endLine":1,"endColumn":32},{"ruleId":"364","severity":1,"message":"397","line":1,"column":34,"nodeType":"366","messageId":"367","endLine":1,"endColumn":43},{"ruleId":"364","severity":1,"message":"398","line":1,"column":45,"nodeType":"366","messageId":"367","endLine":1,"endColumn":54},{"ruleId":"364","severity":1,"message":"399","line":1,"column":56,"nodeType":"366","messageId":"367","endLine":1,"endColumn":70},{"ruleId":"364","severity":1,"message":"400","line":1,"column":72,"nodeType":"366","messageId":"367","endLine":1,"endColumn":81},{"ruleId":"364","severity":1,"message":"401","line":1,"column":83,"nodeType":"366","messageId":"367","endLine":1,"endColumn":91},{"ruleId":"364","severity":1,"message":"402","line":2,"column":8,"nodeType":"366","messageId":"367","endLine":2,"endColumn":19},{"ruleId":"364","severity":1,"message":"403","line":3,"column":8,"nodeType":"366","messageId":"367","endLine":3,"endColumn":17},{"ruleId":"364","severity":1,"message":"404","line":6,"column":9,"nodeType":"366","messageId":"367","endLine":6,"endColumn":20},{"ruleId":"364","severity":1,"message":"405","line":7,"column":8,"nodeType":"366","messageId":"367","endLine":7,"endColumn":18},{"ruleId":"364","severity":1,"message":"406","line":9,"column":7,"nodeType":"366","messageId":"367","endLine":9,"endColumn":16},{"ruleId":"372","severity":1,"message":"407","line":64,"column":38,"nodeType":"374","messageId":"375","endLine":64,"endColumn":40},{"ruleId":"364","severity":1,"message":"408","line":104,"column":9,"nodeType":"366","messageId":"367","endLine":104,"endColumn":22},{"ruleId":"409","severity":2,"message":"410","line":105,"column":32,"nodeType":"366","messageId":"411","endLine":105,"endColumn":43},{"ruleId":"412","severity":1,"message":"413","line":127,"column":81,"nodeType":"414","messageId":"415","endLine":127,"endColumn":82},{"ruleId":"372","severity":1,"message":"416","line":7,"column":56,"nodeType":"374","messageId":"375","endLine":7,"endColumn":58},{"ruleId":"360","replacedBy":"417"},{"ruleId":"362","replacedBy":"418"},{"ruleId":"368","severity":1,"message":"419","line":28,"column":8,"nodeType":"370","endLine":28,"endColumn":10,"suggestions":"420"},{"ruleId":"368","severity":1,"message":"421","line":64,"column":8,"nodeType":"370","endLine":64,"endColumn":14,"suggestions":"422"},{"ruleId":"372","severity":1,"message":"373","line":138,"column":39,"nodeType":"374","messageId":"375","endLine":138,"endColumn":41},{"ruleId":"364","severity":1,"message":"423","line":3,"column":5,"nodeType":"366","messageId":"367","endLine":3,"endColumn":9},{"ruleId":"364","severity":1,"message":"424","line":7,"column":19,"nodeType":"366","messageId":"367","endLine":7,"endColumn":26},{"ruleId":"364","severity":1,"message":"425","line":14,"column":8,"nodeType":"366","messageId":"367","endLine":14,"endColumn":25},{"ruleId":"372","severity":1,"message":"373","line":39,"column":44,"nodeType":"374","messageId":"375","endLine":39,"endColumn":46},{"ruleId":"364","severity":1,"message":"426","line":3,"column":9,"nodeType":"366","messageId":"367","endLine":3,"endColumn":13},{"ruleId":"368","severity":1,"message":"427","line":45,"column":8,"nodeType":"370","endLine":45,"endColumn":25,"suggestions":"428"},{"ruleId":"368","severity":1,"message":"429","line":40,"column":8,"nodeType":"370","endLine":40,"endColumn":10,"suggestions":"430"},{"ruleId":"364","severity":1,"message":"431","line":38,"column":26,"nodeType":"366","messageId":"367","endLine":38,"endColumn":30},{"ruleId":"368","severity":1,"message":"432","line":42,"column":8,"nodeType":"370","endLine":42,"endColumn":10,"suggestions":"433"},{"ruleId":"364","severity":1,"message":"434","line":45,"column":12,"nodeType":"366","messageId":"367","endLine":45,"endColumn":25},{"ruleId":"364","severity":1,"message":"435","line":58,"column":11,"nodeType":"366","messageId":"367","endLine":58,"endColumn":26},{"ruleId":"436","severity":1,"message":"437","line":107,"column":75,"nodeType":"438","endLine":108,"endColumn":185},{"ruleId":"368","severity":1,"message":"439","line":34,"column":8,"nodeType":"370","endLine":34,"endColumn":10,"suggestions":"440"},"no-native-reassign",["441"],"no-negated-in-lhs",["442"],"no-unused-vars","'technics' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getTechnicsByRoom' and 'room'. Either include them or remove the dependency array. If 'getTechnicsByRoom' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["443"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useEffect' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllRefills'. Either include it or remove the dependency array. If 'getAllRefills' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["444"],"'Divider' is defined but never used.","React Hook useEffect has a missing dependency: 'getPrintersAll'. Either include it or remove the dependency array. If 'getPrintersAll' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["445"],"React Hook useEffect has missing dependencies: 'getComments', 'getRefills', 'getTechnicInfo', and 'params.id'. Either include them or remove the dependency array. If 'getTechnicInfo' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["446"],"'watch' is assigned a value but never used.","'errors' is assigned a value but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","React Hook useEffect has a missing dependency: 'searchData'. Either include it or remove the dependency array.",["447"],"React Hook useEffect has a missing dependency: 'getTechnics'. Either include it or remove the dependency array. If 'getTechnics' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["448"],"'Container' is defined but never used.","'Paper' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'ProfileInfo' is defined but never used.","'Portfolio' is defined but never used.","'useSelector' is defined but never used.","'formatDate' is defined but never used.","'useStyles' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","'groupThemes16' is assigned a value but never used.","no-undef","'groupThemes' is not defined.","undef","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","Array.prototype.find() expects a value to be returned at the end of arrow function.",["441"],["442"],"React Hook useEffect has a missing dependency: 'getSchemaTechnics'. Either include it or remove the dependency array. If 'getSchemaTechnics' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["449"],"React Hook useEffect has missing dependencies: 'categories' and 'filters'. Either include them or remove the dependency array.",["450"],"'Chip' is defined but never used.","'Tooltip' is defined but never used.","'ReportProblemIcon' is defined but never used.","'Grid' is defined but never used.","React Hook useEffect has missing dependencies: 'getStatistic' and 'val'. Either include them or remove the dependency array. If 'getStatistic' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["451"],"React Hook useEffect has a missing dependency: 'getTypes'. Either include it or remove the dependency array. If 'getTypes' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["452"],"'week' is defined but never used.","React Hook useEffect has missing dependencies: 'getCurrentRefills' and 'setCurrentRefill'. Either include them or remove the dependency array. If 'getCurrentRefills' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["453"],"'activeElement' is assigned a value but never used.","'handleClickOpen' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","React Hook useEffect has missing dependencies: 'getDataAutocomplete' and 'property'. Either include them or remove the dependency array. If 'getDataAutocomplete' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["454"],"no-global-assign","no-unsafe-negation",{"desc":"455","fix":"456"},{"desc":"457","fix":"458"},{"desc":"459","fix":"460"},{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},{"desc":"475","fix":"476"},{"desc":"477","fix":"478"},"Update the dependencies array to be: [getTechnicsByRoom, room]",{"range":"479","text":"480"},"Update the dependencies array to be: [getAllRefills]",{"range":"481","text":"482"},"Update the dependencies array to be: [getPrintersAll]",{"range":"483","text":"484"},"Update the dependencies array to be: [getComments, getRefills, getTechnicInfo, params.id]",{"range":"485","text":"486"},"Update the dependencies array to be: [search, searchData]",{"range":"487","text":"488"},"Update the dependencies array to be: [activeTypes, getTechnics]",{"range":"489","text":"490"},"Update the dependencies array to be: [getSchemaTechnics]",{"range":"491","text":"492"},"Update the dependencies array to be: [categories, filters, tech]",{"range":"493","text":"494"},"Update the dependencies array to be: [value, technics, getStatistic, val]",{"range":"495","text":"496"},"Update the dependencies array to be: [getTypes]",{"range":"497","text":"498"},"Update the dependencies array to be: [getCurrentRefills, setCurrentRefill]",{"range":"499","text":"500"},"Update the dependencies array to be: [getDataAutocomplete, property]",{"range":"501","text":"502"},[970,972],"[getTechnicsByRoom, room]",[406,408],"[getAllRefills]",[623,625],"[getPrintersAll]",[3312,3314],"[getComments, getRefills, getTechnicInfo, params.id]",[3591,3599],"[search, searchData]",[3699,3712],"[activeTypes, getTechnics]",[821,823],"[getSchemaTechnics]",[2106,2112],"[categories, filters, tech]",[1336,1353],"[value, technics, getStatistic, val]",[1146,1148],"[getTypes]",[1198,1200],"[getCurrentRefills, setCurrentRefill]",[1235,1237],"[getDataAutocomplete, property]"]
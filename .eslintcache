[{"D:\\PROJECTS\\tech\\src\\index.js":"1","D:\\PROJECTS\\tech\\src\\reportWebVitals.js":"2","D:\\PROJECTS\\tech\\src\\redux\\redux-store.js":"3","D:\\PROJECTS\\tech\\src\\components\\App\\index.js":"4","D:\\PROJECTS\\tech\\src\\redux\\Users-reducer.js":"5","D:\\PROJECTS\\tech\\src\\redux\\App-reducer.js":"6","D:\\PROJECTS\\tech\\src\\redux\\Auth-reducer.js":"7","D:\\PROJECTS\\tech\\src\\redux\\Dialogs-reducer.js":"8","D:\\PROJECTS\\tech\\src\\redux\\Tech-reducer.js":"9","D:\\PROJECTS\\tech\\src\\redux\\Profile-reducer.js":"10","D:\\PROJECTS\\tech\\src\\redux\\Printers-reducer.js":"11","D:\\PROJECTS\\tech\\src\\components\\App\\App.jsx":"12","D:\\PROJECTS\\tech\\src\\api\\api.js":"13","D:\\PROJECTS\\tech\\src\\components\\Preloader\\index.js":"14","D:\\PROJECTS\\tech\\src\\components\\App\\AppWithRouter\\index.js":"15","D:\\PROJECTS\\tech\\src\\components\\App\\Authorization\\index.js":"16","D:\\PROJECTS\\tech\\src\\components\\Header\\index.js":"17","D:\\PROJECTS\\tech\\src\\components\\Preloader\\Preloader.jsx":"18","D:\\PROJECTS\\tech\\src\\components\\App\\Authorization\\Authorization.jsx":"19","D:\\PROJECTS\\tech\\src\\components\\App\\AppWithRouter\\AppWithRouter.jsx":"20","D:\\PROJECTS\\tech\\src\\components\\Header\\Header.jsx":"21","D:\\PROJECTS\\tech\\src\\components\\Header\\Header.css.js":"22","D:\\PROJECTS\\tech\\src\\pages\\TechnicPage\\index.js":"23","D:\\PROJECTS\\tech\\src\\pages\\TypesTechnicsPage\\index.js":"24","D:\\PROJECTS\\tech\\src\\pages\\SignInPage\\index.js":"25","D:\\PROJECTS\\tech\\src\\pages\\Profile\\index.js":"26","D:\\PROJECTS\\tech\\src\\pages\\EventsPage\\index.js":"27","D:\\PROJECTS\\tech\\src\\pages\\RoomPage\\index.js":"28","D:\\PROJECTS\\tech\\src\\pages\\UsersPage\\index.js":"29","D:\\PROJECTS\\tech\\src\\pages\\TypePage\\index.js":"30","D:\\PROJECTS\\tech\\src\\pages\\PrintersPage\\index.js":"31","D:\\PROJECTS\\tech\\src\\pages\\Profile\\ProfilePage.jsx":"32","D:\\PROJECTS\\tech\\src\\pages\\UsersPage\\UsersPage.jsx":"33","D:\\PROJECTS\\tech\\src\\pages\\SignInPage\\SignInPage.jsx":"34","D:\\PROJECTS\\tech\\src\\pages\\TypesTechnicsPage\\TypesTechnicsPage.jsx":"35","D:\\PROJECTS\\tech\\src\\pages\\TechnicPage\\TechnicPage.jsx":"36","D:\\PROJECTS\\tech\\src\\pages\\EventsPage\\EventsPage.jsx":"37","D:\\PROJECTS\\tech\\src\\pages\\PrintersPage\\PrintersPage.jsx":"38","D:\\PROJECTS\\tech\\src\\pages\\TypePage\\TypePage.jsx":"39","D:\\PROJECTS\\tech\\src\\pages\\RoomPage\\RoomPage.jsx":"40","D:\\PROJECTS\\tech\\src\\components\\global\\groupElementsByDate.js":"41","D:\\PROJECTS\\tech\\src\\components\\Common\\TextError.jsx":"42","D:\\PROJECTS\\tech\\src\\components\\Test\\Test.jsx":"43","D:\\PROJECTS\\tech\\src\\components\\Posts\\index.js":"44","D:\\PROJECTS\\tech\\src\\components\\Users\\index.js":"45","D:\\PROJECTS\\tech\\src\\components\\ListTypes\\index.js":"46","D:\\PROJECTS\\tech\\src\\components\\global\\formatDate.js":"47","D:\\PROJECTS\\tech\\src\\components\\Users\\Users.jsx":"48","D:\\PROJECTS\\tech\\src\\components\\ListTypes\\ListTypes.jsx":"49","D:\\PROJECTS\\tech\\src\\components\\Posts\\Posts.jsx":"50","D:\\PROJECTS\\tech\\src\\components\\global\\images.js":"51","D:\\PROJECTS\\tech\\src\\components\\global\\countDays.js":"52","D:\\PROJECTS\\tech\\src\\components\\Post\\Post.jsx":"53","D:\\PROJECTS\\tech\\src\\components\\FiltersTechnic\\index.js":"54","D:\\PROJECTS\\tech\\src\\components\\ListTechnics\\index.js":"55","D:\\PROJECTS\\tech\\src\\components\\Modal\\index.js":"56","D:\\PROJECTS\\tech\\src\\components\\Icon\\index.js":"57","D:\\PROJECTS\\tech\\src\\components\\ActiveCategories\\index.js":"58","D:\\PROJECTS\\tech\\src\\components\\ListItemForm\\index.js":"59","D:\\PROJECTS\\tech\\src\\components\\Profile\\index.js":"60","D:\\PROJECTS\\tech\\src\\components\\Accordion\\index.js":"61","D:\\PROJECTS\\tech\\src\\components\\Modal\\Modal.jsx":"62","D:\\PROJECTS\\tech\\src\\components\\Icon\\Icon.jsx":"63","D:\\PROJECTS\\tech\\src\\components\\ListItemForm\\ListItemForm.jsx":"64","D:\\PROJECTS\\tech\\src\\components\\Profile\\Profile.jsx":"65","D:\\PROJECTS\\tech\\src\\components\\Accordion\\Accordion.jsx":"66","D:\\PROJECTS\\tech\\src\\components\\global\\global.js":"67","D:\\PROJECTS\\tech\\src\\components\\Profile\\ProfileEdit.jsx":"68","D:\\PROJECTS\\tech\\src\\components\\Profile\\ProfileView.jsx":"69","D:\\PROJECTS\\tech\\src\\components\\AutocompleteTextarea\\index.js":"70","D:\\PROJECTS\\tech\\src\\components\\SocialLink\\index.js":"71","D:\\PROJECTS\\tech\\src\\components\\FollowList\\index.js":"72","D:\\PROJECTS\\tech\\src\\components\\Status\\index.js":"73","D:\\PROJECTS\\tech\\src\\components\\AutocompleteTextarea\\AutocompleteTextarea.jsx":"74","D:\\PROJECTS\\tech\\src\\components\\SocialLink\\SocialLink.jsx":"75","D:\\PROJECTS\\tech\\src\\components\\Status\\Status.jsx":"76","D:\\PROJECTS\\tech\\src\\components\\FollowList\\FolowList.jsx":"77","D:\\PROJECTS\\tech\\src\\components\\ListTechnics\\ListTechnics.jsx":"78","D:\\PROJECTS\\tech\\src\\components\\FiltersTechnic\\FiltersTechnic.jsx":"79","D:\\PROJECTS\\tech\\src\\components\\ActiveCategories\\ActiveCategories.jsx":"80","D:\\PROJECTS\\tech\\src\\components\\global\\getProperty.js":"81","D:\\PROJECTS\\tech\\src\\components\\global\\groupArray.js":"82","D:\\PROJECTS\\tech\\src\\components\\MiniCardTechnic\\MiniCardTechnicSceleton.jsx":"83","D:\\PROJECTS\\tech\\src\\components\\MiniCardTechnic\\index.js":"84","D:\\PROJECTS\\tech\\src\\components\\MiniCardTechnic\\MiniCardTechnic.jsx":"85"},{"size":585,"mtime":1627375847798,"results":"86","hashOfConfig":"87"},{"size":375,"mtime":1623747530468,"results":"88","hashOfConfig":"87"},{"size":882,"mtime":1629100822733,"results":"89","hashOfConfig":"87"},{"size":364,"mtime":1628494126865,"results":"90","hashOfConfig":"87"},{"size":4067,"mtime":1627286579156,"results":"91","hashOfConfig":"87"},{"size":800,"mtime":1627286579153,"results":"92","hashOfConfig":"87"},{"size":2962,"mtime":1627286579154,"results":"93","hashOfConfig":"87"},{"size":2414,"mtime":1623747530444,"results":"94","hashOfConfig":"87"},{"size":11955,"mtime":1629377967637,"results":"95","hashOfConfig":"87"},{"size":7712,"mtime":1627286579155,"results":"96","hashOfConfig":"87"},{"size":2937,"mtime":1629439865023,"results":"97","hashOfConfig":"87"},{"size":821,"mtime":1628494126864,"results":"98","hashOfConfig":"87"},{"size":5508,"mtime":1629439865019,"results":"99","hashOfConfig":"87"},{"size":63,"mtime":1623747530413,"results":"100","hashOfConfig":"87"},{"size":198,"mtime":1623747530388,"results":"101","hashOfConfig":"87"},{"size":203,"mtime":1623747530391,"results":"102","hashOfConfig":"87"},{"size":348,"mtime":1627286579008,"results":"103","hashOfConfig":"87"},{"size":154,"mtime":1623747530413,"results":"104","hashOfConfig":"87"},{"size":362,"mtime":1623747530389,"results":"105","hashOfConfig":"87"},{"size":1858,"mtime":1629099556049,"results":"106","hashOfConfig":"87"},{"size":3043,"mtime":1629099192769,"results":"107","hashOfConfig":"87"},{"size":1741,"mtime":1623747530402,"results":"108","hashOfConfig":"87"},{"size":687,"mtime":1629101252820,"results":"109","hashOfConfig":"87"},{"size":415,"mtime":1627286579150,"results":"110","hashOfConfig":"87"},{"size":488,"mtime":1623747530440,"results":"111","hashOfConfig":"87"},{"size":201,"mtime":1627286579144,"results":"112","hashOfConfig":"87"},{"size":66,"mtime":1629099471668,"results":"113","hashOfConfig":"87"},{"size":371,"mtime":1629096861308,"results":"114","hashOfConfig":"87"},{"size":456,"mtime":1627286579152,"results":"115","hashOfConfig":"87"},{"size":522,"mtime":1629096861526,"results":"116","hashOfConfig":"87"},{"size":676,"mtime":1629377918228,"results":"117","hashOfConfig":"87"},{"size":335,"mtime":1627286579143,"results":"118","hashOfConfig":"87"},{"size":2033,"mtime":1627286579151,"results":"119","hashOfConfig":"87"},{"size":3943,"mtime":1627286579144,"results":"120","hashOfConfig":"87"},{"size":296,"mtime":1627386813767,"results":"121","hashOfConfig":"87"},{"size":12344,"mtime":1629185346087,"results":"122","hashOfConfig":"87"},{"size":5367,"mtime":1629105438155,"results":"123","hashOfConfig":"87"},{"size":8097,"mtime":1629461335528,"results":"124","hashOfConfig":"87"},{"size":9019,"mtime":1629096861526,"results":"125","hashOfConfig":"87"},{"size":2895,"mtime":1629355343622,"results":"126","hashOfConfig":"87"},{"size":819,"mtime":1629447304254,"results":"127","hashOfConfig":"87"},{"size":205,"mtime":1623747530399,"results":"128","hashOfConfig":"87"},{"size":192,"mtime":1629096860792,"results":"129","hashOfConfig":"87"},{"size":217,"mtime":1627286579078,"results":"130","hashOfConfig":"87"},{"size":665,"mtime":1627286579141,"results":"131","hashOfConfig":"87"},{"size":385,"mtime":1627286579010,"results":"132","hashOfConfig":"87"},{"size":257,"mtime":1629448449487,"results":"133","hashOfConfig":"87"},{"size":2563,"mtime":1627286579140,"results":"134","hashOfConfig":"87"},{"size":3091,"mtime":1628494126902,"results":"135","hashOfConfig":"87"},{"size":608,"mtime":1627286579078,"results":"136","hashOfConfig":"87"},{"size":5659,"mtime":1629123399160,"results":"137","hashOfConfig":"87"},{"size":214,"mtime":1628494126906,"results":"138","hashOfConfig":"87"},{"size":1119,"mtime":1628494126905,"results":"139","hashOfConfig":"87"},{"size":414,"mtime":1628664876645,"results":"140","hashOfConfig":"87"},{"size":423,"mtime":1629096860777,"results":"141","hashOfConfig":"87"},{"size":53,"mtime":1627286579076,"results":"142","hashOfConfig":"87"},{"size":211,"mtime":1628494126880,"results":"143","hashOfConfig":"87"},{"size":260,"mtime":1628686006049,"results":"144","hashOfConfig":"87"},{"size":381,"mtime":1627557422910,"results":"145","hashOfConfig":"87"},{"size":444,"mtime":1627286579081,"results":"146","hashOfConfig":"87"},{"size":86,"mtime":1627388828905,"results":"147","hashOfConfig":"87"},{"size":455,"mtime":1628494126904,"results":"148","hashOfConfig":"87"},{"size":700,"mtime":1629096860652,"results":"149","hashOfConfig":"87"},{"size":2239,"mtime":1629179908974,"results":"150","hashOfConfig":"87"},{"size":4020,"mtime":1627286579079,"results":"151","hashOfConfig":"87"},{"size":4183,"mtime":1629102813026,"results":"152","hashOfConfig":"87"},{"size":1216,"mtime":1629179908974,"results":"153","hashOfConfig":"87"},{"size":4362,"mtime":1627286579080,"results":"154","hashOfConfig":"87"},{"size":1658,"mtime":1627286579080,"results":"155","hashOfConfig":"87"},{"size":425,"mtime":1627904570199,"results":"156","hashOfConfig":"87"},{"size":68,"mtime":1623747530425,"results":"157","hashOfConfig":"87"},{"size":260,"mtime":1627286578978,"results":"158","hashOfConfig":"87"},{"size":337,"mtime":1627286579082,"results":"159","hashOfConfig":"87"},{"size":5882,"mtime":1629096860355,"results":"160","hashOfConfig":"87"},{"size":760,"mtime":1627286579081,"results":"161","hashOfConfig":"87"},{"size":1437,"mtime":1627286579082,"results":"162","hashOfConfig":"87"},{"size":1056,"mtime":1627286578977,"results":"163","hashOfConfig":"87"},{"size":6094,"mtime":1629096860777,"results":"164","hashOfConfig":"87"},{"size":4169,"mtime":1629096860652,"results":"165","hashOfConfig":"87"},{"size":1331,"mtime":1629096859933,"results":"166","hashOfConfig":"87"},{"size":171,"mtime":1628596564393,"results":"167","hashOfConfig":"87"},{"size":287,"mtime":1629096861292,"results":"168","hashOfConfig":"87"},{"size":287,"mtime":1627286579074,"results":"169","hashOfConfig":"87"},{"size":390,"mtime":1628494126903,"results":"170","hashOfConfig":"87"},{"size":1787,"mtime":1629096860777,"results":"171","hashOfConfig":"87"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},"dxenlm",{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"174"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"174"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"174"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"174"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"174"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"174"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"255","messages":"256","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"174"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"174"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"174"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"174"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"174"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"174"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"174"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"174"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"174"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"174"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"174"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"174"},"D:\\PROJECTS\\tech\\src\\index.js",[],["361","362"],"D:\\PROJECTS\\tech\\src\\reportWebVitals.js",[],"D:\\PROJECTS\\tech\\src\\redux\\redux-store.js",[],"D:\\PROJECTS\\tech\\src\\components\\App\\index.js",[],"D:\\PROJECTS\\tech\\src\\redux\\Users-reducer.js",[],"D:\\PROJECTS\\tech\\src\\redux\\App-reducer.js",[],"D:\\PROJECTS\\tech\\src\\redux\\Auth-reducer.js",[],"D:\\PROJECTS\\tech\\src\\redux\\Dialogs-reducer.js",[],"D:\\PROJECTS\\tech\\src\\redux\\Tech-reducer.js",[],"D:\\PROJECTS\\tech\\src\\redux\\Profile-reducer.js",[],"D:\\PROJECTS\\tech\\src\\redux\\Printers-reducer.js",["363","364"],"import {printersAPI, techAPI} from \"../api/api\";\r\n\r\nconst GET_REFILLS = 'GET_REFILLS';\r\nconst GET_ALL_REFILLS = 'GET_ALL_REFILLS'\r\nconst GET_CURRENT_REFILLS = 'GET_CURRENT_REFILLS'\r\nconst SET_PRINTERS = 'SET_PRINTERS'\r\nconst SET_REFILL = 'SET_REFILL'\r\n\r\nlet initialState = {\r\n    refills: [],\r\n    printers: [],\r\n    allRefills: [],\r\n    currentRefills: []\r\n}\r\n\r\nconst PrintersReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_REFILLS: {\r\n            return {\r\n                ...state,\r\n                refills: action.payload\r\n            }\r\n        }\r\n        case GET_ALL_REFILLS: {\r\n            return {\r\n                ...state,\r\n                allRefills: action.payload\r\n            }\r\n        }\r\n        case GET_CURRENT_REFILLS: {\r\n            return {\r\n                ...state,\r\n                currentRefills: action.payload\r\n            }\r\n        }\r\n        case SET_PRINTERS: {\r\n            return {\r\n                ...state,\r\n                printers: action.payload\r\n            }\r\n        }\r\n        case SET_REFILL: {\r\n            return {\r\n                ...state,\r\n                allRefills: [...state.allRefills, action.payload]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\nexport const setAllRefillsAC = (payload) => {\r\n    return {type: GET_ALL_REFILLS, payload}\r\n};\r\nexport const setCurrentRefillsAC = (payload) => {\r\n    return {type: GET_CURRENT_REFILLS, payload}\r\n}\r\nexport const setRefillAC = (payload) => {\r\n    return {type: SET_REFILL, payload}\r\n}\r\n\r\nexport const setRefillsAC = (payload) => {\r\n    return {type: GET_REFILLS, payload}\r\n};\r\nexport const setPrintersAC = (payload) => {\r\n    return {type: SET_PRINTERS, payload}\r\n};\r\n\r\nexport const getAllRefills = () => async (dispatch) => {\r\n    let response = await printersAPI.getAllRefills()\r\n    dispatch(setAllRefillsAC(response))\r\n}\r\nexport const getRefills = (id) => async (dispatch) => {\r\n    let response = await printersAPI.getRefills(id)\r\n    dispatch(setRefillsAC(response))\r\n}\r\nexport const getCurrentRefills = () => async (dispatch) => {\r\n    let response = await printersAPI.getCurrentRefills()\r\n    dispatch(setCurrentRefillsAC(response))\r\n    return response\r\n}\r\n\r\nexport const getPrintersAll = () => async (dispatch) => {\r\n    let response = await printersAPI.getPrintersAll()\r\n    dispatch(setPrintersAC(response))\r\n}\r\nexport const sendOrder = (id) => async (dispatch) => {\r\n    let response = await printersAPI.sendOrder(id)\r\n    dispatch(setPrintersAC(response))\r\n}\r\n\r\nexport const updateCurrentRefills = (data) => async (dispatch) => {\r\n    let response = await printersAPI.updateCurrentRefills(data)\r\n}\r\n\r\nexport const addRefillForPrinter = (id, data) => {\r\n    return async (dispatch) => {\r\n        let response = await printersAPI.addRefillForPrinter(id, data)\r\n        dispatch(setRefillAC(response))\r\n    }\r\n}\r\n\r\nexport default PrintersReducer","D:\\PROJECTS\\tech\\src\\components\\App\\App.jsx",["365"],"import React, {useEffect} from \"react\";\r\nimport Header from \"../Header\";\r\nimport {Switch} from \"react-router-dom\";\r\nimport AppWithRouter from \"./AppWithRouter\";\r\nimport Authorization from \"./Authorization\";\r\nimport Preloader from \"../Preloader\";\r\n\r\nconst App = ({isAuth, initialize, getTypes, initialized}) => {\r\n    // useEffect(() => {\r\n    //     initialize()\r\n    // },[initialize]);\r\n    useEffect(() => {\r\n        getTypes()\r\n    },[]);\r\n    return (\r\n        <>\r\n            {\r\n                !initialized ? <Preloader />\r\n                : <>\r\n                    <Header/>\r\n\r\n                        <Switch>\r\n                            {!isAuth ? <AppWithRouter/> : <Authorization/>}\r\n\r\n                        </Switch>\r\n                </>\r\n            }\r\n\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default App\r\n","D:\\PROJECTS\\tech\\src\\api\\api.js",["366","367"],"import axios from \"axios\";\r\nimport {sendOrder, updateCurrentRefills} from \"../redux/Printers-reducer\";\r\n\r\n// const URL = 'https://technicsklevzhits.herokuapp.com'\r\nconst URL = 'http://localhost:3004'\r\nlet instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0',\r\n    headers: {\r\n        \"API-KEY\": \"69bc9857-b17c-4142-859f-4409d84efd2a\"\r\n    }\r\n})\r\nexport const usersAPI = {\r\n    getUsers(rowsPerPage, currentPage, friend) {\r\n        return instance.get(`/users?page=${currentPage}&count=${rowsPerPage}&friend=${friend}`)\r\n            .then(responce => responce.data)\r\n    },\r\n    following(id) {\r\n        return instance.post(`/follow/${id}`)\r\n    },\r\n    unfollowing(id) {\r\n        return instance.delete(`/follow/${id}`)\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getUserInfo(id) {\r\n        return instance.get(`/profile/${id}`)\r\n            .then(responce => responce.data)\r\n    },\r\n    getStatus(id) {\r\n        return instance.get(`/profile/status/${id}`)\r\n            .then(responce => responce)\r\n    },\r\n    updateUserInfo(user) {\r\n        return instance.put(`/profile`, user)\r\n            .then(responce => responce.data)\r\n    },\r\n\r\n    uploadPhoto(photo) {\r\n        let formData = new FormData();\r\n        formData.append(\"image\", photo)\r\n        return instance.put(`/profile/photo`, formData, {\r\n            headers: {'content-type': 'multipart/form-data'}\r\n        })\r\n\r\n    },\r\n    updateStatus(status) {\r\n        return instance.put('profile/status', status)\r\n    }\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`/auth/me`).then(responce => responce.data)\r\n    },\r\n    login(email, password, rememberMe, captcha) {\r\n        return instance.post(`/auth/login`, {email, password, rememberMe, captcha}).then(responce => responce.data)\r\n    },\r\n    getCaptcha() {\r\n        return instance.get(`/security/get-captcha-url`).then(responce => {\r\n            return responce.data.url\r\n        })\r\n    },\r\n    logout() {\r\n        return instance.post(`/auth/logout`).then(responce => responce.data)\r\n    }\r\n}\r\n\r\nexport const techAPI = {\r\n    getTypes() {\r\n        return axios.get(`${URL}/types`).then(responce => responce.data)\r\n    },\r\n    addType(obj) {\r\n        return axios.post(`${URL}/types`, obj).then(response => response)\r\n    },\r\n    deleteType(id) {\r\n        return axios.delete(`${URL}/types/${id}`).then(response => response)\r\n    },\r\n    editType(id, obj) {\r\n        return axios.put(`${URL}/types/${id}`, obj).then(response => response)\r\n    },\r\n    getActiveType(value) {\r\n        return axios.get(`${URL}/types?type=${value}`).then(response => response.data[0])\r\n    },\r\n    getTechnicsForType(value) {\r\n        // const arrayToQuery = (property, arr) => {\r\n        //     if ((arr[0] === \"\") || (arr.length === 0)) {\r\n        //         return ``\r\n        //     }\r\n        //     else {\r\n        //         return (arr.map(el => {\r\n        //             return `&${property}=${el}`\r\n        //         })).join('')\r\n        //     }\r\n        // }\r\n        // let queryYears = arrayToQuery(\"year\", years)\r\n        // let buildsYears = arrayToQuery(\"korpus\", builds)\r\n        return axios.get(`${URL}/technics?type_like=${value}`).then(response => response.data)\r\n    },\r\n    getTechnicInfo(id) {\r\n        return axios.get(`${URL}/technics/${id}`).then(response => response.data)\r\n    },\r\n    updateTechnic(id, data) {\r\n        return axios.patch(`${URL}/technics/${id}`, data).then(response => response)\r\n    },\r\n    // id = \"18\", data = {date: \"2019-01-01\"}\r\n    // id = \"18\", data = {print: true}\r\n    getUsers() {\r\n        return axios.get(`${URL}/users`).then(responce => responce.data)\r\n    },\r\n    getRooms() {\r\n        return axios.get(`${URL}/technics`).then(responce => responce.data)\r\n    },\r\n    addUser(data) {\r\n        return axios.post(`${URL}/users`, {name: data}).then(responce => responce.data)\r\n    },\r\n    getComments(id) {\r\n        return axios.get(`${URL}/technics/${id}/comments`).then(responce => responce.data)\r\n    },\r\n    addComment(id, val) {\r\n        return axios.post(`${URL}/technics/${id}/comments`, {\r\n            \"postId\": id,\r\n            \"date\": new Date(),\r\n            \"body\": val\r\n        }).then(responce => responce.data)\r\n    },\r\n    getTechnicsByRoom(room) {\r\n        return axios.get(`${URL}/technics?room=${room}`).then(response => response.data)\r\n    },\r\n    addTechnic(data) {\r\n        return axios.post(`${URL}/technics`, data).then(responce => responce.data)\r\n    }\r\n}\r\nexport const printersAPI = {\r\n    getRefills(id) {\r\n        return axios.get(`${URL}/technics/${id}/refills`).then(response => response.data)\r\n    },\r\n    getAllRefills() {\r\n        return axios.get(`${URL}/refills`).then(response => response.data)\r\n    },\r\n    getCurrentRefills() {\r\n        return axios.get(`${URL}/refillsCurrent/1`).then(response => response.data.arr)\r\n    },\r\n    getPrintersAll() {\r\n        return axios.get(`${URL}/technics?type=Принтер&type=МФУ&type=Ксерокс`).then(response => response.data)\r\n    },\r\n    updateCurrentRefills(data) {\r\n        let obj = {\r\n            \"arr\": data\r\n        }\r\n        return axios.patch(`${URL}/refillsCurrent/1`, obj).then(response => response.data)\r\n    },\r\n    addRefillForPrinter(id, data) {\r\n        let obj = {\r\n            ...data,\r\n            \"receiverDate\": Date.now(),\r\n        }\r\n        return axios.post(`${URL}/technics/${id}/refills`, obj).then(response => response.data)\r\n    }\r\n}\r\n\r\n","D:\\PROJECTS\\tech\\src\\components\\Preloader\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\App\\AppWithRouter\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\App\\Authorization\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Header\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Preloader\\Preloader.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\App\\Authorization\\Authorization.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\App\\AppWithRouter\\AppWithRouter.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\Header\\Header.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\Header\\Header.css.js",[],"D:\\PROJECTS\\tech\\src\\pages\\TechnicPage\\index.js",[],"D:\\PROJECTS\\tech\\src\\pages\\TypesTechnicsPage\\index.js",[],"D:\\PROJECTS\\tech\\src\\pages\\SignInPage\\index.js",[],"D:\\PROJECTS\\tech\\src\\pages\\Profile\\index.js",[],"D:\\PROJECTS\\tech\\src\\pages\\EventsPage\\index.js",[],"D:\\PROJECTS\\tech\\src\\pages\\RoomPage\\index.js",[],"D:\\PROJECTS\\tech\\src\\pages\\UsersPage\\index.js",[],"D:\\PROJECTS\\tech\\src\\pages\\TypePage\\index.js",["368"],"import {connect} from \"react-redux\";\r\nimport TypePage from \"./TypePage\";\r\nimport {addUser, getActiveType, addTechnic} from \"../../redux/Tech-reducer\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        activeType: state.techs.activeType,\r\n        technicsLength: state.techs.technics.length,\r\n        toogleLoadingInfoFotType: state.techs.toogleLoadingInfoFotType,\r\n    }\r\n}\r\nconst mapToDispatch = {\r\n    getActiveType,\r\n    addTechnic\r\n}\r\n\r\nexport default connect(mapStateToProps, mapToDispatch)(TypePage)\r\n","D:\\PROJECTS\\tech\\src\\pages\\PrintersPage\\index.js",[],"D:\\PROJECTS\\tech\\src\\pages\\Profile\\ProfilePage.jsx",[],"D:\\PROJECTS\\tech\\src\\pages\\UsersPage\\UsersPage.jsx",["369"],"import React, {useEffect} from \"react\";\r\nimport {Container, Paper, Tab, Tabs} from \"@material-ui/core\";\r\nimport Preloader from \"../../components/Preloader\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {Link, withRouter} from \"react-router-dom\";\r\n// import {makeStyles} from \"@material-ui/styles\";\r\nimport Users from \"../../components/Users\";\r\n\r\n// const useStyles = makeStyles({\r\n//     root: {\r\n//         flexGrow: 1,\r\n//     },\r\n// });\r\n\r\nconst UsersPage = ({isFetching, rowsPerPage, currentPage, getUsers, match}) => {\r\n    let sectionUrl = match.params.section\r\n    const [value, setValue] = React.useState(0);\r\n    useEffect(() => {\r\n        if (sectionUrl === 'following') {\r\n            setValue(1)\r\n            getUsers(rowsPerPage, currentPage, true);\r\n        }\r\n        if (sectionUrl === 'allusers') {\r\n            setValue(0)\r\n            getUsers(rowsPerPage, currentPage, false);\r\n        }\r\n    }, [sectionUrl])\r\n    // const classes = useStyles();\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {!isFetching\r\n                ? <Container>\r\n                    <Typography variant=\"body1\" component=\"span\">\r\n                    </Typography>\r\n                    <Paper square>\r\n                        <Tabs\r\n                            value={value}\r\n                            indicatorColor=\"primary\"\r\n                            textColor=\"primary\"\r\n                            onChange={handleChange}\r\n                            aria-label=\"disabled tabs example\"\r\n                        >\r\n                            <Tab label=\"All Users\" component={Link} to=\"/users/allusers\"/>\r\n                            <Tab label=\"following\" component={Link} to=\"/users/following\"/>\r\n                        </Tabs>\r\n                    </Paper>\r\n                    <Users/>\r\n                </Container>\r\n                : <Preloader/>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(UsersPage)","D:\\PROJECTS\\tech\\src\\pages\\SignInPage\\SignInPage.jsx",[],"D:\\PROJECTS\\tech\\src\\pages\\TypesTechnicsPage\\TypesTechnicsPage.jsx",[],"D:\\PROJECTS\\tech\\src\\pages\\TechnicPage\\TechnicPage.jsx",["370","371","372","373","374","375"],"import React, {useEffect, useState} from \"react\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Container,\r\n    Divider,\r\n    Grid, IconButton,\r\n    List, ListItem, ListItemAvatar, ListItemText,\r\n} from \"@material-ui/core\";\r\nimport {deepOrange} from '@material-ui/core/colors';\r\nimport ControlledAccordions from \"../../components/Accordion\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ListItemForm from \"../../components/ListItemForm\";\r\nimport Icon from \"../../components/Icon\";\r\nimport countDays from \"../../components/global/countDays\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {format} from \"date-fns\";\r\nimport images from \"../../components/global/images\";\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    avatarWrapper: {\r\n        padding: \"20px\",\r\n        textAlign: \"center\"\r\n    },\r\n    devider: {\r\n        margin: \"20px\"\r\n    },\r\n    avatar: {\r\n        width: theme.spacing(20),\r\n        height: theme.spacing(20),\r\n        margin: \"0 auto\",\r\n        color: theme.palette.getContrastText(deepOrange[500]),\r\n        backgroundColor: deepOrange[500],\r\n        cursor: \"pointer\"\r\n    },\r\n    technicInfoWrapper: {\r\n        padding: \"20px\"\r\n    },\r\n    listItemText: {\r\n        fontSize: '1.1em',\r\n        fontWeight: \"bold\"\r\n    },\r\n    paper: {\r\n        padding: \"10px\",\r\n        width: \"100%\"\r\n    },\r\n    repairs: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-around\"\r\n    },\r\n    repair: {\r\n        minWidth: \"200px\",\r\n        width: \"23%\",\r\n        textAlign: \"center\"\r\n    },\r\n    margin: {\r\n        margin: \"20px 0\"\r\n    }\r\n}))\r\nlet repair = [\r\n    {\r\n        id: '1',\r\n        application: '2017-05-25',\r\n        message: 'message',\r\n        dispatch: '2017-05-27',\r\n        getting: '2017-05-29'\r\n    },\r\n    {\r\n        id: '2',\r\n        application: '2017-05-25',\r\n        message: 'message',\r\n        dispatch: '2017-05-27',\r\n        getting: '2017-05-29'\r\n    },\r\n    {\r\n        id: '3',\r\n        application: '2017-05-25',\r\n        message: 'message',\r\n        dispatch: '2017-05-27',\r\n        getting: '2017-05-29'\r\n    },\r\n    {\r\n        id: '4',\r\n        application: '2017-05-25',\r\n        message: 'message',\r\n        dispatch: '2017-05-27',\r\n        getting: '2017-05-29'\r\n    },\r\n\r\n]\r\n\r\nconst TechnicPage = ({\r\n                         activeTechnic,\r\n                         getTechnicInfo,\r\n                         users,\r\n                         addComment,\r\n                         activeTechnicComments,\r\n                         getComments,\r\n                         getRefills,\r\n                         refills\r\n                     }) => {\r\n    useEffect(() => {\r\n        getTechnicInfo(params.id)\r\n        getComments(params.id)\r\n        getRefills(params.id)\r\n    }, [])\r\n    const {register, handleSubmit, watch, formState: {errors}} = useForm();\r\n\r\n    const [aaa, setAaa] = useState(false)\r\n    const [bbb, setBbb] = useState(false)\r\n    const [ccc, setCcc] = useState(false)\r\n\r\n    const onSubmit = data => {\r\n        addComment(activeTechnic.id, data.msg)\r\n    };\r\n    const classes = useStyles();\r\n    const params = useParams();\r\n    const formatDate = (value) => {\r\n        return format(new Date(value), 'dd.MM.yyyy')\r\n    }\r\n    const addImage = (name) => {\r\n        console.log(images[name])\r\n    }\r\n    return (\r\n        <Container>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={4}>\r\n                    <Paper>\r\n                        <div className={classes.avatarWrapper}>\r\n                            <Avatar\r\n                                variant={\"square\"}\r\n                                src={images[activeTechnic.name]}\r\n                                className={classes.avatar}\r\n                            >\r\n                            </Avatar>\r\n                            <Divider className={classes.devider}/>\r\n                            <ListItemForm activeTechnic={activeTechnic} property={\"type\"} text={\"Тип\"}/>\r\n                            <ListItemForm activeTechnic={activeTechnic} property={\"name\"} text={\"Наименование\"}/>\r\n\r\n                        </div>\r\n                    </Paper>\r\n                    <div style={{display: \"flex\", justifyContent: \"center\"}}>\r\n                        <IconButton aria-label=\"delete\" color={aaa ? \"primary\" : \"secondary\"} onClick={() => setAaa(!aaa)}>\r\n                            <SettingsIcon />\r\n                        </IconButton>\r\n                        <IconButton aria-label=\"delete\" color={bbb ? \"primary\" : \"secondary\"} onClick={() => setBbb(!bbb)}>\r\n                            <CommentIcon />\r\n                        </IconButton>\r\n                    </div>\r\n\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                                Место установки\r\n                            </Typography>\r\n                            <Divider/>\r\n                            <List>\r\n                                <ListItemForm activeTechnic={activeTechnic} property={\"room\"} text={\"Кабинет\"}/>\r\n                                <ListItemForm activeTechnic={activeTechnic} property={\"build\"} text={\"Корпус\"}/>\r\n                                <ListItemForm activeTechnic={activeTechnic} property={\"user\"} text={\"ФИО сотрудника\"}\r\n                                              array={users}/>\r\n                                <ListItemForm activeTechnic={activeTechnic} property={\"date\"}\r\n                                              text={\"Дата получения\"}/>\r\n                                <ListItemForm activeTechnic={activeTechnic} property={\"faculty\"}\r\n                                              text={\"Факультет\"}/>\r\n                            </List>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                                Бухгалтерия\r\n                            </Typography>\r\n                            <Divider/>\r\n                            <ListItemForm activeTechnic={activeTechnic} property={\"invent\"} text={\"Инвентарный номер\"}/>\r\n                            <ListItemForm activeTechnic={activeTechnic} property={\"zavod\"} text={\"Заводской номер\"}/>\r\n                            <ListItemForm activeTechnic={activeTechnic} property={\"matfyo\"}\r\n                                          text={\"Материально-ответственное лицо\"}/>\r\n                            <ListItemForm activeTechnic={activeTechnic} property={\"year\"} text={\"Год выпуска\"}/>\r\n                            <ListItemForm activeTechnic={activeTechnic} property={\"print\"} text={\"Наклейка\"}/>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            {aaa && <Grid className={classes.margin} container spacing={2}>\r\n                <Paper className={classes.paper}>\r\n                    <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                        Комментарии\r\n                    </Typography>\r\n                    <Typography>Описание: {activeTechnic.desc}</Typography>\r\n                    <Typography>Проблема: {activeTechnic.problem}</Typography>\r\n                    <form onSubmit={handleSubmit(onSubmit)}>\r\n                        <input defaultValue=\"test\" {...register(\"msg\")} />\r\n                        <input type=\"submit\"/>\r\n                    </form>\r\n                    <List>\r\n                        {activeTechnicComments.map((el, i) => {\r\n                            return <ListItem key={i}>\r\n                                <ListItemAvatar>\r\n                                    <Avatar>\r\n                                    </Avatar>\r\n                                </ListItemAvatar>\r\n                                <ListItemText primary={el.body} secondary={formatDate(el.date)}/>\r\n                            </ListItem>\r\n                        })}\r\n\r\n                    </List>\r\n\r\n\r\n                </Paper>\r\n\r\n            </Grid>}\r\n            {bbb && <Grid container className={classes.margin} spacing={2}>\r\n                <Paper className={classes.paper}>\r\n                    <div style={{display: \"flex\"}}>\r\n                        <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                            Заявки на ремонт\r\n                        </Typography>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            endIcon={<Icon type={\"send\"}></Icon>}\r\n                        >\r\n                            Send\r\n                        </Button>\r\n                    </div>\r\n\r\n                    <div className={classes.repairs}>\r\n                        {repair.map(el => {\r\n                            return <Card className={classes.repair}>\r\n                                <CardContent>\r\n                                    <Typography>Дата заявки: {el.application}</Typography>\r\n                                    <Typography>Проблема: {el.message}</Typography>\r\n                                    <Typography>Дата передачи: {el.dispatch}</Typography>\r\n                                    <Typography>Дата получения: {el.getting}</Typography>\r\n                                    <Typography>Всего в ремонте: {countDays(el.dispatch, el.getting)}</Typography>\r\n\r\n                                </CardContent>\r\n                            </Card>\r\n                        })}\r\n                    </div>\r\n                </Paper>\r\n\r\n            </Grid>}\r\n            <Grid container className={classes.margin} spacing={2}>\r\n                {\r\n                    ((activeTechnic.type === 'Принтер') || (activeTechnic.type === 'МФУ') || (activeTechnic.type === 'Ксерокс')) &&\r\n                    <Paper className={classes.paper}>\r\n                        <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                            Заправки\r\n                        </Typography>\r\n                        <Button component={Link} to={\"/printers\"} variant={\"contained\"}\r\n                                color={\"primary\"}>Заполнить</Button>\r\n                        <Typography variant={\"body2\"}>Максимальное количество\r\n                            заправок за год: 2</Typography>\r\n                        <Divider/>\r\n                        {/*<Steppers/>*/}\r\n\r\n                        {refills ? <>\r\n                            <div>\r\n\r\n                                <ControlledAccordions array={refills}/>\r\n                            </div>\r\n                        </> : <Button component={Link} to={\"/printers\"}>Заполнить</Button>}\r\n                    </Paper>\r\n                }\r\n            </Grid>\r\n\r\n            <Grid container className={classes.margin} spacing={2}>\r\n                <Paper className={classes.paper}>\r\n                    <div style={{display: \"flex\"}}>\r\n                        <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                            Техника в этом кабинете\r\n                        </Typography>\r\n                    </div>\r\n                    <div>\r\n                        <Button component={Link} to={`/room/${activeTechnic.room}`}>Техника кабинета</Button>\r\n\r\n                    </div>\r\n\r\n                </Paper>\r\n\r\n            </Grid>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default TechnicPage;","D:\\PROJECTS\\tech\\src\\pages\\EventsPage\\EventsPage.jsx",[],"D:\\PROJECTS\\tech\\src\\pages\\PrintersPage\\PrintersPage.jsx",["376","377","378","379"],"D:\\PROJECTS\\tech\\src\\pages\\TypePage\\TypePage.jsx",["380","381","382"],"import {withRouter, useParams, useLocation, useHistory} from \"react-router-dom\";\r\nimport {\r\n    Button,\r\n    Container, DialogActions, DialogContent,\r\n    Divider,\r\n    Grid,\r\n    Paper, TextField\r\n} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport ListTypes from \"../../components/ListTypes\";\r\nimport {Skeleton} from \"@material-ui/lab\";\r\nimport Icon from \"../../components/Icon\";\r\nimport ListTechnics from \"../../components/ListTechnics\";\r\nimport ActiveCategories from \"../../components/ActiveCategories\";\r\nimport FiltersTechnic from \"../../components/FiltersTechnic\";\r\nimport Modal from \"../../components/Modal\";\r\nimport {useForm} from \"react-hook-form\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        color: theme.palette.text.secondary,\r\n        position: \"relative\",\r\n        height: \"250px\",\r\n        whiteSpace: \"nowrap\",\r\n        overflow: \"hidden\",\r\n        textOverflow: \"ellipsis\",\r\n    },\r\n    years: {\r\n        height: \"80%\",\r\n        overflow: \"overlay\"\r\n\r\n    },\r\n    typeInfoWrapper: {\r\n        display: \"flex\",\r\n        textAlign: \"center\"\r\n\r\n    },\r\n    typeInfo: {\r\n        width: \"100%\"\r\n    },\r\n    imageType: {\r\n        background: \"#3f51b5\",\r\n        color: \"white\",\r\n        display: \"block\",\r\n        width: \"60px\",\r\n        height: \"60px\",\r\n        textAlign: \"center\",\r\n        marginRight: \"20px\",\r\n    },\r\n    wrapperInfo: {\r\n        marginTop: \"50px\"\r\n    },\r\n    icon: {\r\n        fontSize: \"2.5em\",\r\n        paddingTop: \"10px\"\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: '25ch',\r\n    },\r\n    roomItem: {\r\n        marginTop: \"20px\",\r\n        padding: \"7px\"\r\n    },\r\n    activeItem: {\r\n        background: \"red\",\r\n    },\r\n    roomNumber: {}\r\n}));\r\n\r\nconst schema = [\r\n    [\r\n        {type: \"name\", name: \"Наименование\"},\r\n        {type: \"type\", name: \"Тип\"},\r\n    ],\r\n    [\r\n        {type: \"room\", name: \"Кабинет\"},\r\n        {type: \"build\", name: \"Корпус\"},\r\n        {type: \"user\", name: \"ФИО сторудника\"},\r\n        {type: \"date\", name: \"Дата выдачи\"},\r\n        {type: \"faculty\", name: \"Факультет\"}\r\n    ],\r\n    [\r\n        {type: \"invent\", name: \"Инвентарный номер\"},\r\n        {type: \"zavod\", name: \"Заводской номер\"},\r\n        {type: \"matfyo\", name: \"Материально-ответственное лицо\"},\r\n        {type: \"year\", name: \"Год выпуска\"},\r\n    ]\r\n]\r\n\r\nconst TypePage = ({getActiveType, activeType,addTechnic, toogleLoadingInfoFotType, technicsLength}) => {\r\n    // const {search} = useLocation()\r\n    // const {years, builds} = queryString.parse(search)\r\n    const classes = useStyles();\r\n    const params = useParams();\r\n    const [categories, setCategories] = useState(() => [])\r\n    const [open, setOpen] = React.useState(false);\r\n    const {register, handleSubmit} = useForm();\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const onSubmit = data => addTechnic(data);\r\n    const handlerCategory = (prop, value) => {\r\n        let property = () => {\r\n            let obj = {[prop]: value}\r\n            if (JSON.stringify(categories).includes(JSON.stringify(obj))) {\r\n                return false\r\n            } else {\r\n                return true\r\n            }\r\n        } // Проверка наличия выбранной кабегории в массиве категорий\r\n        setCategories(prevState => (property()) ? [...prevState, {[prop]: value}] : prevState.filter(el => ((Object.keys(el)[0], Object.values(el)[0]) !== (prop, value))))\r\n    }\r\n\r\n    useEffect(() => {\r\n        getActiveType(params.type)\r\n    }, [params.type]) // получение техники в соответствии с url, обновление при смене url\r\n\r\n    return (\r\n        <Container>\r\n            <Grid container className={classes.wrapperInfo} spacing={3}>\r\n                <Grid item xs={3}>\r\n                    <Paper className={classes.paper}>\r\n                        {toogleLoadingInfoFotType ? <SceletonInfoType/> : <>\r\n                            <div className={classes.typeInfoWrapper}>\r\n                                <div className={classes.typeInfo}>\r\n                                    <Icon type={activeType.type} size={3}/>\r\n                                    <Typography color={\"primary\"}>Тип</Typography>\r\n                                    <Typography variant=\"h6\">{activeType.name}</Typography>\r\n                                    <Typography variant=\"body2\" gutterBottom>\r\n                                        [ {activeType.type} ]\r\n                                    </Typography>\r\n                                    <Divider/>\r\n                                    <Typography\r\n                                        variant={\"subtitle2\"}>\r\n                                        Всего:\r\n                                        <Typography\r\n                                            variant={\"subtitle1\"}\r\n                                            component={\"span\"}\r\n                                        >\r\n                                            {technicsLength}\r\n                                        </Typography>\r\n                                    </Typography>\r\n                                    <Button color={\"primary\"} variant={\"contained\"}\r\n                                            onClick={handleClickOpen}> Добавить</Button>\r\n                                </div>\r\n\r\n                            </div>\r\n                        </>\r\n                        }\r\n                    </Paper>\r\n                </Grid> {/*  Тип, картинка */}\r\n                <Grid item xs={9}>\r\n                    <Paper className={classes.paper}>\r\n                        <Typography color={\"primary\"}>Фильтрация</Typography>\r\n                        <Divider/>\r\n                        <FiltersTechnic categories={categories} handlerCategory={handlerCategory}/>\r\n                    </Paper>\r\n                </Grid> {/*  Фильтрация*/}\r\n            </Grid> {/*  Сводная информация*/}\r\n            {activeType ? <>\r\n            </> : \"\"}\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={8}>\r\n                    <ActiveCategories categories={categories} handlerCategory={handlerCategory}/>\r\n                    <ListTechnics categories={categories} setCategories={setCategories}/>\r\n                </Grid> {/*  Список техники по кабинетам*/}\r\n                <Grid item xs={4}>\r\n                    <ListTypes/>\r\n                </Grid> {/*  Список типов техникик */}\r\n            </Grid>\r\n            <Modal open={open} handleClose={handleClose} title={\"Добавить тип\"}>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                    <DialogContent>\r\n                        <div>\r\n                            {\r\n                                schema[0].map(el => {\r\n                                    return <TextField {...register(el.type)} label={el.name}/>\r\n                                })\r\n                            }\r\n                        </div>\r\n                        <div style={{display: \"flex\"}}>\r\n                            <div>\r\n                                {\r\n                                    schema[1].map(el => {\r\n                                        return <TextField {...register(el.type)} defaultValue={\"\"} label={el.name}/>\r\n                                    })\r\n                                }\r\n                            </div>\r\n                            <div>\r\n                                {\r\n                                    schema[2].map(el => {\r\n                                        return <TextField {...register(el.type)} label={el.name}/>\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button type=\"submit\">Submit</Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Modal>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withRouter(TypePage)\r\n\r\nexport const SceletonInfoType = () => {\r\n    return <div>\r\n        <Skeleton/>\r\n        <Skeleton animation={false}/>\r\n        <Skeleton animation=\"wave\"/>\r\n    </div>\r\n}\r\n\r\n","D:\\PROJECTS\\tech\\src\\pages\\RoomPage\\RoomPage.jsx",["383","384"],"import {Avatar, Card, Container, Grid, List, ListItem, ListItemIcon, ListItemText} from \"@material-ui/core\";\r\nimport {Link, useParams} from \"react-router-dom\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {useEffect, useState} from \"react\";\r\nimport images from \"../../components/global/images\";\r\nimport Test from \"../../components/Test/Test\";\r\n\r\nconst layout = [\"Системный блок\", \"Компьютер (комплект)\", \"Монитор\", \"Моноблок\", \"Ноутбук\",\"Телевизор\",  \"Проектор\",\"Принтер\", \"МФУ\",\"Сканер\",\"Ксерокс\",\r\n    \"Акустическая система\",\"Планшет\",\"Веб-камера\", \"Мышь\",  \"Клавиатура\", \"Фотоаппарат\", \"Документ-камера\", \"Перфобиндер\"]\r\n\r\nconst RoomPage = ({getTechnicsByRoom, technicsByRoom}) => {\r\n    let {room} = useParams();\r\n    const [technics, setTechnics] = useState(\"\")\r\n    useEffect(() => {\r\n        async function getTechnics() {\r\n            let response = await getTechnicsByRoom(room)\r\n            return response\r\n        }\r\n        getTechnics().then(response => setTechnics(response))\r\n    }, [])\r\n    return <Container>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <Typography>Перечень техники кабинета {room}</Typography>\r\n\r\n            </Grid>\r\n            <Grid item xs={12} style={{display: \"flex\",justifyContent: \"space-around\", flexWrap: \"wrap\"}}>\r\n\r\n                {technicsByRoom.map(obj => {\r\n                    return <Card style={{maxWidth: \"300px\", minWidth: \"300px\", marginTop: \"15px\"}}>\r\n                        {obj.user}\r\n                        <List>\r\n                            {\r\n                                layout.map(el => {\r\n                                   return  obj.properties.map(technic => {\r\n                                        if (el === technic.type) {\r\n                                            return <ListItem component={Link} to={`/technics/${technic.id}`}>\r\n                                                <ListItemIcon>\r\n                                                    <Avatar variant={\"square\"} src={images[technic.name]}></Avatar>\r\n                                                </ListItemIcon>\r\n                                                <ListItemText primary={technic.name} secondary={technic.type}/>\r\n                                            </ListItem>\r\n                                        }\r\n                                    })\r\n                                })\r\n                            }\r\n                        </List>\r\n\r\n                    </Card>\r\n                })}\r\n\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n            <Test initialColumns={technics} />\r\n        </Grid>\r\n    </Container>\r\n}\r\n\r\nexport default RoomPage","D:\\PROJECTS\\tech\\src\\components\\global\\groupElementsByDate.js",["385"],"import formatDate from \"./formatDate\";\r\n\r\nconst groupElementsByDate = (array, property) => {\r\n    return array.reduce((previousValue, currentValue) => {\r\n        let b = formatDate(currentValue[property])\r\n        let objType = previousValue.find((element) => {\r\n            let a = element[\"date\"]\r\n                if (a === b) {\r\n                    return element\r\n                }\r\n            }\r\n        );\r\n        if (!objType) {\r\n            const currentValueDDMMYYYY = formatDate(currentValue[property])\r\n            previousValue.push({\r\n                \"date\": currentValueDDMMYYYY,\r\n                properties: [currentValue]\r\n            });\r\n        } else {\r\n            objType.properties.push(currentValue);\r\n        }\r\n        return previousValue;\r\n    }, [])\r\n}\r\nexport default groupElementsByDate","D:\\PROJECTS\\tech\\src\\components\\Common\\TextError.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\Test\\Test.jsx",["386"],"import makeStyles from \"@material-ui/core/styles/makeStyles\";\r\n\r\n\r\nconst Test = () => {\r\n\r\n\r\nreturn <h6>test</h6>\r\n}\r\n\r\nexport default Test;\r\n\r\nconst useStyles = makeStyles((theme) => ({}));\r\n","D:\\PROJECTS\\tech\\src\\components\\Posts\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Users\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\ListTypes\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\global\\formatDate.js",[],"D:\\PROJECTS\\tech\\src\\components\\Users\\Users.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\ListTypes\\ListTypes.jsx",["387"],"import {\r\n    Button, DialogActions, DialogContent,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemSecondaryAction,\r\n    ListItemText,\r\n    ListSubheader, TextField\r\n} from \"@material-ui/core\";\r\nimport {Link,useParams} from \"react-router-dom\";\r\nimport {DeleteOutline} from \"@material-ui/icons\";\r\nimport React, {useEffect} from \"react\";\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Modal from \"../Modal\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport Icon from \"../Icon\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    activeType: {\r\n      background: \"#d5d5d5\"\r\n    }\r\n}));\r\n\r\nconst ListTypes = ({types, deleteType, getTypes, addType}) => {\r\n    const params = useParams();\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n    const {register, handleSubmit} = useForm();\r\n    const onSubmit = data => addType(data);\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    useEffect(() => {\r\n        getTypes()\r\n    }, [])\r\n    return (\r\n        <>\r\n            {types &&\r\n            <List subheader={<ListSubheader>Settings</ListSubheader>}>\r\n                {types.map(el => {\r\n                        return <ListItem className={(params.type === el.type) ? classes.activeType : \"\"} component={Link} to={`/types/${el.type}`} key={el.id}>\r\n\r\n                            <ListItemIcon>\r\n                                <Icon type={el.type} />\r\n                            </ListItemIcon>\r\n                            <ListItemText id=\"switch-list-label-wifi\" primary={el.name}/>\r\n                            <ListItemSecondaryAction>\r\n                                <DeleteOutline onClick={() => deleteType(el.id)}/>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    }\r\n                )}\r\n            </List>\r\n            }\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                className={classes.button}\r\n                startIcon={<CloudUploadIcon/>} onClick={handleClickOpen}>\r\n                Добавить тип\r\n            </Button>\r\n\r\n            <Modal open={open} handleClose={handleClose} title={\"Добавить тип\"}>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n\r\n                <DialogContent>\r\n                        <TextField {...register(\"type\")} defaultValue=\"type\"/>\r\n                        <TextField {...register(\"name\")} defaultValue=\"name\"/>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button type=\"submit\">Submit</Button>\r\n                </DialogActions>\r\n                </form>\r\n\r\n\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListTypes\r\n\r\n","D:\\PROJECTS\\tech\\src\\components\\Posts\\Posts.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\global\\images.js",[],"D:\\PROJECTS\\tech\\src\\components\\global\\countDays.js",[],"D:\\PROJECTS\\tech\\src\\components\\Post\\Post.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\FiltersTechnic\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\ListTechnics\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Modal\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Icon\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\ActiveCategories\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\ListItemForm\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Profile\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Accordion\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Modal\\Modal.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\Icon\\Icon.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\ListItemForm\\ListItemForm.jsx",["388","389"],"import {FormControlLabel, ListItem, ListItemIcon, ListItemText, Switch} from \"@material-ui/core\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport icons from \"../global/global\";\r\nimport AutocompleteTextarea from \"../AutocompleteTextarea\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Icon from \"../Icon\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    listItemText: {\r\n        fontSize: '.9em',\r\n        fontWeight: \"bold\"\r\n    }\r\n}))\r\n\r\nconst ListItemForm = ({updateTechnic, activeTechnic, property, text}) => {\r\n\r\n    const classes = useStyles();\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [checked, setChecked] = React.useState('');\r\n    useEffect(() => {\r\n        setChecked(activeTechnic.print)\r\n    }, [activeTechnic])\r\n    const toggleChecked = () => {\r\n        setChecked((prev) => !prev);\r\n        updateTechnic(activeTechnic.id, {\r\n            [property]: !checked\r\n        })\r\n    };\r\n\r\n    const editPropertyTechnic = () => {\r\n        setEditMode(true)\r\n    }\r\n    if (property === 'print') {\r\n        return <FormControlLabel\r\n            control={<Switch checked={checked} onChange={toggleChecked}/>}\r\n            label={text}\r\n        />\r\n    } else {\r\n        return <ListItem onDoubleClick={() => editPropertyTechnic(activeTechnic, property)}>\r\n            <ListItemIcon>\r\n                <Icon component={Link} to={\"/test\"} type={property}/>\r\n            </ListItemIcon>\r\n            {!editMode ? <ListItemText\r\n                classes={{primary: classes.listItemText}}\r\n                primary={activeTechnic[property] ||\r\n                <Button variant=\"contained\" color=\"secondary\"\r\n                        onClick={() => {\r\n                            editPropertyTechnic(activeTechnic, property)\r\n                        }}>Заполнить</Button>}\r\n                secondary={text}\r\n            /> : <AutocompleteTextarea activeTechnic={activeTechnic} property={property} text={text}\r\n                                       setEditMode={setEditMode}/>}\r\n\r\n        </ListItem>\r\n    }\r\n}\r\nexport default ListItemForm\r\n\r\n\r\n","D:\\PROJECTS\\tech\\src\\components\\Profile\\Profile.jsx",["390"],"import {\r\n    Avatar, Button,\r\n    Grid,\r\n} from \"@material-ui/core\";\r\nimport s from \"./Profile.module.scss\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Preloader from \"../Preloader\";\r\nimport ProfileView from \"./ProfileView\";\r\nimport ProfileEdit from \"./ProfileEdit\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        \"&:hover\": {\r\n            opacity: \"0.6\"\r\n        },\r\n        cursor: \"pointer\"\r\n    },\r\n    avatarInput: {\r\n        display: \"none\"\r\n    },\r\n    label: {\r\n        background: \"red\"\r\n    }\r\n\r\n})\r\n\r\nconst Profile = ({user, id, getUserInfo, updateUserInfo, isUpdateProfile, uploadPhoto, match}) => {\r\n    const classes = useStyles();\r\n\r\n    // Считывание URL\r\n    let userIdURL = match.params.uID;\r\n    // если undefined , то присваиваем id авторизованного\r\n    if (!userIdURL) {\r\n        userIdURL = id\r\n    }\r\n\r\n    // переключение режима профайла (простмотр/редактирование)\r\n    let [editMode, setEditMode] = useState(false)\r\n    const toogleMode = () => {\r\n        setEditMode(!editMode)\r\n    }\r\n\r\n    // проверка владельца\r\n    const checkIsOwner = () => {\r\n        if (userIdURL === id) {\r\n            return true\r\n        }\r\n    }\r\n\r\n    let [userId, setUserId] = useState(userIdURL)\r\n    useEffect(() => {\r\n        getUserInfo(userId)\r\n    }, [getUserInfo, userId,userIdURL]);\r\n\r\n    // обновление картинки профиля\r\n    const onImageChange = (e) => {\r\n        uploadPhoto(e.target.files[0])\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={3} className={s.profile}>\r\n            {!user\r\n                ? <Preloader/>\r\n                : <>\r\n                    <Grid item xs={4}>\r\n                        <label className={classes.label}  htmlFor=\"contained-button-file\">\r\n                            <Avatar\r\n                                className={classes.avatar}\r\n                                style={{height: '300px', width: '300px', margin: '0 auto'}}\r\n                                src={user.photos.large}\r\n                                variant=\"circular\"\r\n                            />\r\n                        </label>\r\n                        <input\r\n                            accept=\"image/*\"\r\n                            onChange={onImageChange}\r\n                            className={classes.avatarInput}\r\n                            id=\"contained-button-file\"\r\n                            multiple\r\n                            name=\"image\"\r\n                            type=\"file\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid\r\n                        className={s.profile__info}\r\n                        item xs>\r\n                        {checkIsOwner() &&\r\n                        <Button\r\n                            onClick={toogleMode}\r\n                            variant=\"outlined\"\r\n                            className={s.profile__edit}\r\n                        >\r\n                            {editMode\r\n                                ? 'Назад'\r\n                                : 'Редактировать профиль'\r\n                            }\r\n\r\n                        </Button> }\r\n                        {\r\n                            isUpdateProfile && <Preloader/>\r\n                        }\r\n                        {\r\n                            !editMode && <ProfileView user={user}/>\r\n                        }\r\n                        {\r\n                            editMode && <ProfileEdit\r\n                                user={user}\r\n                                toogleMode={toogleMode}\r\n                                updateUserInfo={updateUserInfo}\r\n                            />\r\n                        }\r\n\r\n                    </Grid>\r\n                </>}\r\n        </Grid>\r\n    )\r\n}\r\nexport default withRouter(Profile);","D:\\PROJECTS\\tech\\src\\components\\Accordion\\Accordion.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\global\\global.js",[],"D:\\PROJECTS\\tech\\src\\components\\Profile\\ProfileEdit.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\Profile\\ProfileView.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\AutocompleteTextarea\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\SocialLink\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\FollowList\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\Status\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\AutocompleteTextarea\\AutocompleteTextarea.jsx",["391"],"import {IconButton, TextField} from \"@material-ui/core\";\r\nimport Autocomplete, {createFilterOptions} from \"@material-ui/lab/Autocomplete\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {Controller, useForm} from \"react-hook-form\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    }\r\n}))\r\n\r\nconst filter = createFilterOptions();\r\n\r\nconst AutocompleteTextarea = ({activeTechnic, property, updateTechnic, setEditMode, getUsers, getRooms, text}) => {\r\n\r\n    const classes = useStyles()\r\n    const [array, setArray] = useState(\"\")\r\n    const [value, setValue] = useState(null)\r\n    useEffect(() => {\r\n        if (property === 'user1') {\r\n            async function fetchUsers() {\r\n                let response = await getUsers()\r\n                return response\r\n            }\r\n\r\n            fetchUsers().then(response => setArray(response))\r\n        }\r\n        if (property === 'matfyo') {\r\n            async function fetchUsers() {\r\n                let response = await getUsers()\r\n                return response\r\n            }\r\n\r\n            fetchUsers().then(response => setArray(response))\r\n        }\r\n        if (property === 'room') {\r\n            async function fetchRooms() {\r\n                let response = await getRooms()\r\n                return response\r\n            }\r\n\r\n            fetchRooms().then(response => setArray(response))\r\n        }\r\n    }, [])\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === 'Enter') {\r\n            handleSubmit(onSubmit)();\r\n            setArray([])\r\n        }\r\n        if (e.key === 'Escape') {\r\n            setEditMode(false)\r\n        }\r\n\r\n    }\r\n    const selectItem = (event, newValue) => {\r\n        if (typeof newValue === 'string') {\r\n            setValue({\r\n                [property]: newValue,\r\n            });\r\n        } else if (newValue && newValue.inputValue) {\r\n            setValue({\r\n                [property]: newValue.inputValue,\r\n            });\r\n        } else {\r\n            setValue(newValue);\r\n        }\r\n    }\r\n    const {register, handleSubmit, control, reset} = useForm();\r\n    const onSubmit = (obj) => {\r\n        if (obj[property] === undefined) {\r\n            let val = {\r\n                [property]: value[property]\r\n            }\r\n            updateTechnic(activeTechnic.id, val)\r\n            setEditMode(false)\r\n            reset()\r\n        } else {\r\n            updateTechnic(activeTechnic.id, obj)\r\n            setEditMode(false)\r\n            reset()\r\n        }\r\n    }\r\n    return (\r\n        <form className={classes.root} onSubmit={handleSubmit(onSubmit)}>\r\n            {((property === 'date') || (property === 'year'))\r\n                ? <TextField\r\n                    id=\"date\"\r\n                    label={text}\r\n                    type=\"date\"\r\n                    {...register(property)}\r\n                    defaultValue=\"2017-05-24\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n                : <div>\r\n                    {!array ?\r\n                        <TextField onKeyDown={handleKeyDown} defaultValue={activeTechnic[property]}\r\n                                   autoFocus={true} {...register(property)} />\r\n                        : <Controller\r\n                            name={property}\r\n                            control={control}\r\n                            render={({field}) => <Autocomplete\r\n                                filterOptions={(options, params) => {\r\n                                    const filtered = filter(options, params);\r\n                                    if (params.inputValue !== '') {\r\n                                        filtered.push({\r\n                                            inputValue: params.inputValue,\r\n                                            [property]: `Add \"${params.inputValue}\"`,\r\n                                        });\r\n                                    }\r\n                                    return filtered;\r\n                                }}\r\n                                selectOnFocus\r\n                                defaultValue={activeTechnic[property]}\r\n                                clearOnBlur\r\n                                onKeyDown={handleKeyDown}\r\n                                onChange={selectItem}\r\n                                handleHomeEndKeys\r\n                                id=\"free-solo-with-text-demo\"\r\n                                options={array}\r\n                                getOptionLabel={(option) => {\r\n                                    if (typeof option === 'string') {\r\n                                        return option;\r\n                                    }\r\n                                    if (option.inputValue) {\r\n                                        return option.inputValue;\r\n                                    }\r\n                                    return option[property];\r\n                                }}\r\n                                renderOption={(option) => option[property]}\r\n                                style={{width: 250}}\r\n                                freeSolo\r\n                                renderInput={(field) => (\r\n                                    <TextField autoFocus={true} {...field} label={text} variant=\"outlined\"/>\r\n                                )}\r\n                            />}\r\n                        />\r\n\r\n                    }\r\n                </div>\r\n            }\r\n\r\n            <div>\r\n                <IconButton\r\n                    color=\"primary\" aria-label=\"upload picture\" type=\"submit\"\r\n                >\r\n                    <SaveIcon/>\r\n                </IconButton>\r\n            </div>\r\n        </form>)\r\n}\r\n\r\nexport default AutocompleteTextarea","D:\\PROJECTS\\tech\\src\\components\\SocialLink\\SocialLink.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\Status\\Status.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\FollowList\\FolowList.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\ListTechnics\\ListTechnics.jsx",["392","393","394","395","396","397","398"],"import {Card, CardContent, Divider, List} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MiniCardTechnic from \"../MiniCardTechnic\";\r\nimport MiniCardTechnicSkeleton from \"../MiniCardTechnic/MiniCardTechnicSceleton\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport groupArray from \"../global/groupArray\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    roomItem: {\r\n        marginTop: \"20px\",\r\n        padding: \"7px\"\r\n    },\r\n    roomNumber: {}\r\n}));\r\n\r\n// const schema = [\r\n//     {\r\n//         address: \"Голубева, 26\",\r\n//         build: \"9\",\r\n//         blocks: [\r\n//             {\r\n//                 name: \"1 блок\",\r\n//                 rooms: [1, 2, 3, 8, 10],\r\n//             }, {\r\n//                 name: \"2 блок\",\r\n//                 rooms: [11, 14, 15, 16, \"Охрана\"],\r\n//             }, {\r\n//                 name: \"3 блок\",\r\n//                 rooms: [21, 22, 23, 24, 25, 26],\r\n//             }, {\r\n//                 name: \"4 блок\",\r\n//                 rooms: [31, 34, 35, 36, \"Архив\"],\r\n//             }, {\r\n//                 name: \"Гостиница\",\r\n//                 rooms: [\"Администратор\", \"Заведующий\"],\r\n//             }, {\r\n//                 name: \"Первое образование\",\r\n//                 rooms: [\"Администратор\", \"Заведующий\", \"Кабушкина\", \"Могилевская\"],\r\n//             }\r\n//         ]\r\n//     },\r\n//     {\r\n//         address: \"Советская, 18\",\r\n//         build: \"1\",\r\n//         blocks: [\r\n//             {\r\n//                 name: \"5 этаж\",\r\n//                 rooms: [142],\r\n//             },\r\n//             {\r\n//                 name: \"8 этаж\",\r\n//                 rooms: [81, 82, 83, 84, 85, 88],\r\n//             }, {\r\n//                 name: \"10 этаж\",\r\n//                 rooms: [101, 102, 103, 104, 105, 106, 107, 108, \"Кладовка\", \"Лифтовая\"],\r\n//             }, {\r\n//                 name: \"11 этаж\",\r\n//                 rooms: [113, 118],\r\n//             }, {\r\n//                 name: \"12 этаж\",\r\n//                 rooms: [121, 122, 123, 124, 125],\r\n//             }, {\r\n//                 name: \"13 этаж\",\r\n//                 rooms: [132],\r\n//             }, {\r\n//                 name: \"14 этаж\",\r\n//                 rooms: [571],\r\n//             }\r\n//         ]\r\n//     }\r\n// ]\r\n\r\nconst ListTechnics = ({technicsByCategory, toogleLoadingInfoFotType, categories}) => {\r\n    const classes = useStyles();\r\n    const generateCondition = (el) => {\r\n        let groupCategories = groupArray(categories)\r\n\r\n        return Object.keys(groupCategories).every(key => {\r\n            return groupCategories[key].some(elArr => elArr === el[key])\r\n        })\r\n    }\r\n    const checkItem = (el) => {\r\n        return (generateCondition(el)) ? true : false\r\n    }\r\n    const checkObj = (obj) => {\r\n        let a = obj.some(el => checkItem(el))\r\n        return a\r\n    }\r\n    const Cardd = ({el}) => {\r\n        return <Card key={el.room} className={classes.roomItem}>\r\n            <Typography component={Link} to={`/room/${el.room}`} variant={\"h5\"} className={`${classes.roomNumber}`}>\r\n                {!(Number.parseInt(el.room)) ? el.room : `${el.room} кабинет`}\r\n            </Typography>\r\n\r\n            <List dense>\r\n                {el.properties.map((el1, i) => {\r\n                    return !toogleLoadingInfoFotType\r\n                        ? <MiniCardTechnic key={i} el={el1}/>\r\n                        : <MiniCardTechnicSkeleton key={i}/>\r\n                })}\r\n            </List>\r\n        </Card>\r\n    }\r\n    const filteredTechnics = technicsByCategory.map((obj, i) => {\r\n        if (categories.length === 0) {\r\n            return <Cardd key={i} el={obj}/>\r\n        } else {\r\n            if (checkObj(obj.properties)) {\r\n                return <Cardd key={i} el={obj}/>\r\n            } else {\r\n                return null\r\n            }\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>\r\n            {filteredTechnics}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ListTechnics\r\n\r\n\r\n// {schema.map(obj => {\r\n//     return <Card key={obj.build} className={classes.roomItem}>\r\n//         <CardContent>\r\n//             <Typography variant={\"h5\"} className={`${classes.roomNumber}`}>\r\n//                 {obj.address}\r\n//             </Typography>\r\n//             <div>\r\n//                 {obj.blocks.map((block) => {\r\n//                     return <Card className={classes.roomItem}>\r\n//                         <Divider/>\r\n//                         <Typography variant={\"h6\"} className={`${classes.roomNumber}`}>\r\n//                             {block.name}</Typography>\r\n//                         <div>\r\n//                             {block.rooms.map(room => {\r\n//                                 { console.log(technics) }\r\n//                                 return <div>\r\n//                                     <Typography component={Link} to={`/room/${room}`} variant={\"h5\"} className={`${classes.roomNumber}`}>\r\n//                                         {!(Number.parseInt(room)) ? room : `${room} кабинет`}\r\n//                                     </Typography>\r\n//\r\n//                                     <List dense>\r\n//                                         {technics.map((el,i) => {\r\n//                                             if (room == el.room) {\r\n//                                                 return <MiniCardTechnic key={i} el={el}/>\r\n//                                             }\r\n//                                         })\r\n//                                         }\r\n//                                     </List>\r\n//                                 </div>\r\n{/*                            })*/}\r\n{/*                            }*/}\r\n//                         </div>\r\n//                     </Card>\r\n//\r\n{/*                })}*/}\r\n{/*            </div>*/}\r\n{/*        </CardContent>*/}\r\n\r\n//     </Card>\r\n// })}","D:\\PROJECTS\\tech\\src\\components\\FiltersTechnic\\FiltersTechnic.jsx",["399","400","401"],"import React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport {List, ListItem, ListItemText} from \"@material-ui/core\";\r\nimport Icon from \"../Icon\";\r\nimport getProperty from \"../global/getProperty\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        backgroundColor: theme.palette.background.paper,\r\n        display: 'flex',\r\n        height: 224,\r\n    },\r\n    tabs: {\r\n        width: \"30%\",\r\n        borderRight: `1px solid ${theme.palette.divider}`,\r\n    },\r\n    statisticItems: {\r\n        height: \"180px\",\r\n        overflow: \"auto\"\r\n    },\r\n    tabPanel: {\r\n        width: \"70%\",\r\n    },\r\n    active: {\r\n        background: \"red\"\r\n    }\r\n}));\r\n\r\n\r\nconst FiltersTechnics = ({getStatistic, technics, paramsTechnics, statistics, categories, handlerCategory}) => {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n    let val = paramsTechnics[value].property\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n    useEffect(() => {\r\n        getStatistic(val)\r\n    }, [value, technics])\r\n    return (\r\n        <div className={classes.root}>\r\n            <Tabs\r\n                orientation=\"vertical\"\r\n                variant=\"scrollable\"\r\n                value={value}\r\n                onChange={handleChange}\r\n                aria-label=\"Vertical tabs example\"\r\n                className={classes.tabs}\r\n            >\r\n                {paramsTechnics.map((el, i) => {\r\n                    return <Tab key={i} label={el.title} {...a11yProps(i)} />\r\n                })}\r\n\r\n            </Tabs>\r\n\r\n            {paramsTechnics.map((el, i) => {\r\n                return <TabPanel\r\n                    className={classes.tabPanel}\r\n                    value={value} index={i}>\r\n                    <List key={i} className={classes.statisticItems}>\r\n                        {\r\n                            statistics.map((obj,i) => {\r\n                                let prop = getProperty(obj)\r\n                                const isContains = () => {\r\n                                    let a = categories.some(el => {\r\n                                        if (obj[prop] === el[prop]) {\r\n                                            return true\r\n                                        }\r\n                                    })\r\n                                    return a\r\n                                }\r\n                                return <ListItem key={i} onClick={() => handlerCategory(val, obj.[val])} button\r\n                                                 className={isContains() ? classes.active : null}>\r\n                                    <Icon type={val}/>\r\n                                    <ListItemText\r\n                                        primary={`${obj.[val] || 'Не указано'} - ${obj.properties.length} шт`}/>\r\n                                </ListItem>\r\n                            })\r\n                        }\r\n                    </List>\r\n\r\n                </TabPanel>\r\n            })}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst a11yProps = (index) => {\r\n    return {\r\n        id: `vertical-tab-${index}`,\r\n        'aria-controls': `vertical-tabpanel-${index}`,\r\n    };\r\n}\r\nconst TabPanel = (props) => {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`vertical-tabpanel-${index}`}\r\n            aria-labelledby={`vertical-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default FiltersTechnics","D:\\PROJECTS\\tech\\src\\components\\ActiveCategories\\ActiveCategories.jsx",["402"],"import React, {useEffect} from \"react\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport Icon from \"../Icon\";\r\n\r\nconst ActiveCategories = ({categories, handlerCategory}) => {\r\n    const generateUrl = (arr) => {\r\n        let str = Object.keys(categories).map(key => {\r\n            if (categories[key].length === 0) {\r\n                return null\r\n            } else {\r\n                return `${key}=${categories[key]}`\r\n            }\r\n        })\r\n        return str.filter(n => n).join('&')\r\n    } // Генерация URL на основе активных категорий\r\n    let history = useHistory();\r\n    const categoriesElements = categories.map((el,i) => {\r\n        let type = Object.keys(el)[0]\r\n        let value = Object.values(el)[0]\r\n        return <Chip style={{cursor: \"pointer\"}} onClick={() => handlerCategory(type,value)} key={i} avatar={<Icon type={type}></Icon>} label={value}/>\r\n    }) // Генерация карточек по кабинетам\r\n\r\n    useEffect(() => {\r\n        let urlData = generateUrl(categories)\r\n        history.push({\r\n            search: `${(urlData === '&') ? '' : urlData}`\r\n        });\r\n    }, [categories])\r\n    return (\r\n        <>\r\n            {categoriesElements}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ActiveCategories","D:\\PROJECTS\\tech\\src\\components\\global\\getProperty.js",[],"D:\\PROJECTS\\tech\\src\\components\\global\\groupArray.js",[],"D:\\PROJECTS\\tech\\src\\components\\MiniCardTechnic\\MiniCardTechnicSceleton.jsx",[],"D:\\PROJECTS\\tech\\src\\components\\MiniCardTechnic\\index.js",[],"D:\\PROJECTS\\tech\\src\\components\\MiniCardTechnic\\MiniCardTechnic.jsx",["403","404","405"],"// import {makeStyles} from \"@material-ui/core/styles\";\r\nimport {\r\n        Button,\r\n    Chip,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemSecondaryAction,\r\n    ListItemText, Tooltip\r\n} from \"@material-ui/core\";\r\nimport {Link} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport Icon from \"../Icon\";\r\nimport images from \"../global/images\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\n// const useStyles = makeStyles((theme) => ({}))\r\n\r\nconst MiniCardTechnic = ({el, keys}) => {\r\n\r\n    // const classes = useStyles();\r\n    return (\r\n        <ListItem component={Link} key={el} to={`/technics/${el.id}`} button>\r\n\r\n            <ListItemIcon>\r\n                <Avatar variant={\"square\"} src={images[el.name]}></Avatar>\r\n                {/*<Icon type={el.type} />*/}\r\n            </ListItemIcon>\r\n            <ListItemText\r\n                primary={`[${!el.invent ?\r\n                    <Button color=\"secondary\">Заполнить</Button> : el.invent}] - ${el.name}`}\r\n                secondary={`${el.year} ${el.user}`}\r\n            />\r\n            <ListItemSecondaryAction style={{display: \"flex\"}}>\r\n                {Object.keys(keys).map(key => {\r\n                    if (!el[keys[key].key]) {\r\n                        return <Tooltip key={key} title={keys[key].name}><span style={{\r\n                            display: \"block\",\r\n                            width: \"10px\",\r\n                            textAlign: \"center\",\r\n                            color: \"white\",\r\n                            marginRight: \"2px\",\r\n                            background: keys[key].bg\r\n                        }}>!</span></Tooltip>\r\n                    }\r\n                })}\r\n            </ListItemSecondaryAction>\r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default MiniCardTechnic",{"ruleId":"406","replacedBy":"407"},{"ruleId":"408","replacedBy":"409"},{"ruleId":"410","severity":1,"message":"411","line":1,"column":22,"nodeType":"412","messageId":"413","endLine":1,"endColumn":29},{"ruleId":"410","severity":1,"message":"414","line":94,"column":9,"nodeType":"412","messageId":"413","endLine":94,"endColumn":17},{"ruleId":"415","severity":1,"message":"416","line":14,"column":7,"nodeType":"417","endLine":14,"endColumn":9,"suggestions":"418"},{"ruleId":"410","severity":1,"message":"419","line":2,"column":9,"nodeType":"412","messageId":"413","endLine":2,"endColumn":18},{"ruleId":"410","severity":1,"message":"420","line":2,"column":20,"nodeType":"412","messageId":"413","endLine":2,"endColumn":40},{"ruleId":"410","severity":1,"message":"421","line":3,"column":9,"nodeType":"412","messageId":"413","endLine":3,"endColumn":16},{"ruleId":"415","severity":1,"message":"422","line":27,"column":8,"nodeType":"417","endLine":27,"endColumn":20,"suggestions":"423"},{"ruleId":"415","severity":1,"message":"424","line":114,"column":8,"nodeType":"417","endLine":114,"endColumn":10,"suggestions":"425"},{"ruleId":"410","severity":1,"message":"426","line":115,"column":36,"nodeType":"412","messageId":"413","endLine":115,"endColumn":41},{"ruleId":"410","severity":1,"message":"427","line":115,"column":55,"nodeType":"412","messageId":"413","endLine":115,"endColumn":61},{"ruleId":"410","severity":1,"message":"428","line":119,"column":12,"nodeType":"412","messageId":"413","endLine":119,"endColumn":15},{"ruleId":"410","severity":1,"message":"429","line":119,"column":17,"nodeType":"412","messageId":"413","endLine":119,"endColumn":23},{"ruleId":"410","severity":1,"message":"430","line":129,"column":11,"nodeType":"412","messageId":"413","endLine":129,"endColumn":19},{"ruleId":"410","severity":1,"message":"431","line":3,"column":5,"nodeType":"412","messageId":"413","endLine":3,"endColumn":11},{"ruleId":"410","severity":1,"message":"432","line":14,"column":8,"nodeType":"412","messageId":"413","endLine":14,"endColumn":16},{"ruleId":"415","severity":1,"message":"433","line":37,"column":8,"nodeType":"417","endLine":37,"endColumn":10,"suggestions":"434"},{"ruleId":"415","severity":1,"message":"435","line":41,"column":8,"nodeType":"417","endLine":41,"endColumn":10,"suggestions":"436"},{"ruleId":"410","severity":1,"message":"437","line":1,"column":32,"nodeType":"412","messageId":"413","endLine":1,"endColumn":43},{"ruleId":"410","severity":1,"message":"438","line":1,"column":45,"nodeType":"412","messageId":"413","endLine":1,"endColumn":55},{"ruleId":"415","severity":1,"message":"439","line":130,"column":8,"nodeType":"417","endLine":130,"endColumn":21,"suggestions":"440"},{"ruleId":"415","severity":1,"message":"441","line":20,"column":8,"nodeType":"417","endLine":20,"endColumn":10,"suggestions":"442"},{"ruleId":"443","severity":1,"message":"444","line":35,"column":71,"nodeType":"445","messageId":"446","endLine":35,"endColumn":73},{"ruleId":"443","severity":1,"message":"447","line":6,"column":52,"nodeType":"445","messageId":"446","endLine":6,"endColumn":54},{"ruleId":"410","severity":1,"message":"448","line":12,"column":7,"nodeType":"412","messageId":"413","endLine":12,"endColumn":16},{"ruleId":"415","severity":1,"message":"416","line":43,"column":8,"nodeType":"417","endLine":43,"endColumn":10,"suggestions":"449"},{"ruleId":"410","severity":1,"message":"450","line":2,"column":8,"nodeType":"412","messageId":"413","endLine":2,"endColumn":14},{"ruleId":"410","severity":1,"message":"451","line":5,"column":8,"nodeType":"412","messageId":"413","endLine":5,"endColumn":13},{"ruleId":"410","severity":1,"message":"452","line":52,"column":18,"nodeType":"412","messageId":"413","endLine":52,"endColumn":27},{"ruleId":"415","severity":1,"message":"453","line":46,"column":8,"nodeType":"417","endLine":46,"endColumn":10,"suggestions":"454"},{"ruleId":"410","severity":1,"message":"455","line":1,"column":15,"nodeType":"412","messageId":"413","endLine":1,"endColumn":26},{"ruleId":"410","severity":1,"message":"456","line":1,"column":28,"nodeType":"412","messageId":"413","endLine":1,"endColumn":35},{"ruleId":"457","severity":1,"message":"458","line":157,"column":1,"nodeType":"459","messageId":"460","endLine":157,"endColumn":37},{"ruleId":"457","severity":1,"message":"458","line":158,"column":1,"nodeType":"459","messageId":"460","endLine":158,"endColumn":36},{"ruleId":"457","severity":1,"message":"458","line":162,"column":1,"nodeType":"459","messageId":"460","endLine":162,"endColumn":26},{"ruleId":"457","severity":1,"message":"458","line":163,"column":1,"nodeType":"459","messageId":"460","endLine":163,"endColumn":25},{"ruleId":"457","severity":1,"message":"458","line":164,"column":1,"nodeType":"459","messageId":"460","endLine":164,"endColumn":29},{"ruleId":"410","severity":1,"message":"461","line":1,"column":27,"nodeType":"412","messageId":"413","endLine":1,"endColumn":35},{"ruleId":"415","severity":1,"message":"462","line":45,"column":8,"nodeType":"417","endLine":45,"endColumn":25,"suggestions":"463"},{"ruleId":"443","severity":1,"message":"464","line":71,"column":64,"nodeType":"445","messageId":"446","endLine":71,"endColumn":66},{"ruleId":"415","severity":1,"message":"465","line":29,"column":8,"nodeType":"417","endLine":29,"endColumn":20,"suggestions":"466"},{"ruleId":"410","severity":1,"message":"467","line":4,"column":5,"nodeType":"412","messageId":"413","endLine":4,"endColumn":9},{"ruleId":"410","severity":1,"message":"468","line":12,"column":8,"nodeType":"412","messageId":"413","endLine":12,"endColumn":12},{"ruleId":"443","severity":1,"message":"444","line":34,"column":44,"nodeType":"445","messageId":"446","endLine":34,"endColumn":46},"no-native-reassign",["469"],"no-negated-in-lhs",["470"],"no-unused-vars","'techAPI' is defined but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTypes'. Either include it or remove the dependency array. If 'getTypes' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["471"],"'sendOrder' is defined but never used.","'updateCurrentRefills' is defined but never used.","'addUser' is defined but never used.","React Hook useEffect has missing dependencies: 'currentPage', 'getUsers', and 'rowsPerPage'. Either include them or remove the dependency array. If 'getUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["472"],"React Hook useEffect has missing dependencies: 'getComments', 'getRefills', 'getTechnicInfo', and 'params.id'. Either include them or remove the dependency array. If 'getTechnicInfo' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["473"],"'watch' is assigned a value but never used.","'errors' is assigned a value but never used.","'ccc' is assigned a value but never used.","'setCcc' is assigned a value but never used.","'addImage' is assigned a value but never used.","'Button' is defined but never used.","'InfoIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'getCurrentRefills'. Either include it or remove the dependency array. If 'getCurrentRefills' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["474"],"React Hook useEffect has missing dependencies: 'getAllRefills' and 'getPrintersAll'. Either include them or remove the dependency array. If 'getPrintersAll' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["475"],"'useLocation' is defined but never used.","'useHistory' is defined but never used.","React Hook useEffect has a missing dependency: 'getActiveType'. Either include it or remove the dependency array. If 'getActiveType' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["476"],"React Hook useEffect has missing dependencies: 'getTechnicsByRoom' and 'room'. Either include them or remove the dependency array. If 'getTechnicsByRoom' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["477"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.find() expects a value to be returned at the end of arrow function.","'useStyles' is assigned a value but never used.",["478"],"'Avatar' is defined but never used.","'icons' is defined but never used.","'setUserId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getRooms', 'getUsers', and 'property'. Either include them or remove the dependency array. If 'getUsers' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["479"],"'CardContent' is defined but never used.","'Divider' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'getStatistic' and 'val'. Either include them or remove the dependency array. If 'getStatistic' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["480"],"Array.prototype.some() expects a value to be returned at the end of arrow function.","React Hook useEffect has missing dependencies: 'generateUrl' and 'history'. Either include them or remove the dependency array.",["481"],"'Chip' is defined but never used.","'Icon' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"482","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},{"desc":"490","fix":"491"},{"desc":"492","fix":"493"},{"desc":"494","fix":"495"},{"desc":"482","fix":"496"},{"desc":"497","fix":"498"},{"desc":"499","fix":"500"},{"desc":"501","fix":"502"},"Update the dependencies array to be: [getTypes]",{"range":"503","text":"504"},"Update the dependencies array to be: [currentPage, getUsers, rowsPerPage, sectionUrl]",{"range":"505","text":"506"},"Update the dependencies array to be: [getComments, getRefills, getTechnicInfo, params.id]",{"range":"507","text":"508"},"Update the dependencies array to be: [getCurrentRefills]",{"range":"509","text":"510"},"Update the dependencies array to be: [getAllRefills, getPrintersAll]",{"range":"511","text":"512"},"Update the dependencies array to be: [getActiveType, params.type]",{"range":"513","text":"514"},"Update the dependencies array to be: [getTechnicsByRoom, room]",{"range":"515","text":"516"},{"range":"517","text":"504"},"Update the dependencies array to be: [getRooms, getUsers, property]",{"range":"518","text":"519"},"Update the dependencies array to be: [value, technics, getStatistic, val]",{"range":"520","text":"521"},"Update the dependencies array to be: [categories, generateUrl, history]",{"range":"522","text":"523"},[438,440],"[getTypes]",[935,947],"[currentPage, getUsers, rowsPerPage, sectionUrl]",[3113,3115],"[getComments, getRefills, getTechnicInfo, params.id]",[1329,1331],"[getCurrentRefills]",[1415,1417],"[getAllRefills, getPrintersAll]",[3881,3894],"[getActiveType, params.type]",[1018,1020],"[getTechnicsByRoom, room]",[1199,1201],[1519,1521],"[getRooms, getUsers, property]",[1346,1363],"[value, technics, getStatistic, val]",[1138,1150],"[categories, generateUrl, history]"]